{"version":3,"sources":["scripts/helper.js","scripts/process_golden_globes.js","scripts/process_oscars.js","scripts/process_additional_movie_data.js","scripts/process_imdb.js","scripts/preprocess_data.js","index.js"],"names":["cleanMovieName","name","nameStr","String","articlePattern","articleMatch","match","concat","toLowerCase","replace","_helper","require","_typeof","o","Symbol","iterator","constructor","prototype","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","value","configurable","writable","i","_toPrimitive","toPrimitive","call","TypeError","Number","getGoldenGlobesMovieData","goldenGlobes","movieNames","reduce","acc","item","cleanName","film","includes","isWinner","win","nominations","year","year_film","nominee","winner","nbNominations","nbWins","addGoldenGlobesData","imdb","goldenGlobesMovies","map","movie","enhancedMovie","goldenGlobesData","goldenGlobesNominees","goldenGlobesNominations","goldenGlobesWins","getOscarsMovieData","oscars","addOscarsData","oscarMovies","oscarsData","oscarNominees","oscarNominations","oscarWins","getAdditionalMovieData","movies","original_title","companies","production_companies","pCompaniesData","JSON","parse","Array","isArray","pCompany","Boolean","releaseDate","release_date","Date","toISOString","split","error","keywords","popularity","productionCompanies","budget","revenue","addAdditionalMovieData","additionalData","boxOffice","processMovieData","data","stringToArray","fieldName","trim","processedMovie","fieldsToProcess","field","MetricsHelper","standardMetrics","property","movieProperty","createMetricsObject","metricsObject","metric","charAt","toUpperCase","slice","addMovieMetrics","currObject","totalProp","countProp","isNaN","calculateAverages","avgProp","cleanupMetricsProperties","findMostPopularGenre","genres","genreCounts","genre","maxCount","mostPopularGenre","entries","_ref","_ref2","_slicedToArray","count","getFilmContributorsData","contributors","casts","directors","writers","contributorCategories","createContributorObject","nMovies","movieInfo","_ref3","_ref4","categoryName","person","category","getGenreDataIntervals","decades","createYearIntervals","decade","mostCommonGenre","allGenres","_MetricsHelper$findMo","minYear","min","MAX_VALUE","maxYear","max","MIN_VALUE","firstDecade","Math","floor","lastDecade","intervals","decadeYears","startYear","endYear","label","interval","find","getTopCollaborations","limit","undefined","allCollabs","countCollaborations","topActorDirectorCollabs","actorDirectorCollabs","topActorActorCollabs","actorActorCollabs","createCollabObject","isSameType","participant1","participant2","addMovieToCollab","collab","castMembers","actor","director","key","actor1","j","actor2","actorPair","sort","finalizeCollabs","collabs","values","_MetricsHelper$findMo2","a","b","getCertificateData","createCertificateObject","certificateData","certificateList","certificate","_MetricsHelper$findMo3","getDataBySeason","createSeasonObject","beginDate","endDate","seasons","spring","summer","fall","winter","getSeason","dateString","_dateString$split$map","num","parseInt","_dateString$split$map2","month","day","monthDay","toString","padStart","season","_MetricsHelper$findMo4","getMovieLengthData","minRuntime","maxRuntime","runtime","parseRuntime","run_time","firstInterval","lastInterval","console","log","minutes","startMinutes","endMinutes","movieRuntime","_MetricsHelper$findMo5","runtimeString","totalMins","hoursMatch","minutesMatch","_process_golden_globes","_process_oscars","_process_additional_movie_data","_process_imdb","_preprocess_data","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","_arrayLikeToArray","from","test","n","l","u","f","next","done","return","d3","Promise","all","csv","autoType","then","additionalMovieData","contributorData","genreData","collaborationsData","seasonalData","movieLengthData"],"mappings":";;AMEA,IAAAsQ,sBAAA,GAAA3P,OAAA;AACA,IAAA4P,eAAA,GAAA5P,OAAA;AACA,IAAA6P,8BAAA,GAAA7P,OAAA;AACA,IAAA8P,aAAA,GAAA9P,OAAA;AACA,ANLA,IMKA+P,gBAAA,GAAA/P,OAAA;AAGkC,ANPlC,AGFA,AFAA,ACAA,ICAAD,AFAAA,ACAAA,KISkCuI,EHTlC,AFAA,ACAA,GCAAtI,AFAAA,ACAAA,OCAA,AFAA,ACAA,GISkCS,CAAA,EAAAD,CAAA,WAAAwP,eAAA,CAAAvP,CAAA,KAAAwP,qBAAA,CAAAxP,CAAA,EAAAD,CAAA,KAAA0P,2BAAA,CAAAzP,CAAA,EAAAD,CAAA,KAAA2P,gBAAA;AAAA,ANNlC,AGHyC,AFAA,ACAA,SISPA,AHTOlQ,AFAAA,ACAAA,QCAAC,AFAAA,ACAAA,CCAA,AFAA,ACAA,QISP,cAAAiC,SAAA,OHTOlC,AFAAA,ACAAA,OCAA,AFAA,ACAA,wBCAAE,AFAAA,ACAAA,MCAA,AFAA,ACAA,uBCAAA,AFAAA,ACAAA,MCAA,AFAA,ACAA,CCAAC,AFAAA,ACAAA,QCAA,AFAA,ACAA,aCAAF,AFAAA,ACAAA,CCAA,AFAA,ACAA,kBCAAA,AFAAA,ACAAA,CCAA,AFAA,ACAA,gBCAAA,AFAAA,ACAAA,CCAA,AFAA,ACAA,WCAAA,AFAAA,ACAAA,CCAA,AFAA,ACAA,yBCAAC,AFAAA,ACAAA,MCAA,AFAA,ACAA,ICAAD,AFAAA,ACAAA,CCAA,AFAA,ACAA,CCAAG,AFAAA,ACAAA,WCAA,AFAA,ACAA,KCAAF,AFAAA,ACAAA,MCAA,AFAA,ACAA,ICAAD,AFAAA,ACAAA,CCAA,AFAA,ACAA,KCAAC,AFAAA,ACAAA,MCAA,AFAA,ACAA,CCAAG,AFAAA,ACAAA,SCAA,AFAA,ACAA,qBCAAJ,AFAAA,ACAAA,CCAA,AFAA,ACAA,KCAAD,AFAAA,ACAAA,OCAA,AFAA,ACAA,CCAAC,AFAAA,ACAAA,CCAA,AFAA,ACAA;AISP,ANLlC,AGJyC,AFAA,ACAA,SISPgQ,AHTO3P,AFAAA,ACAAA,QCAAC,AFAAA,ACAAA,CCAA,AFAA,ACAA,ECAAC,AFAAA,ACAAA,CCAA,AFAA,ACAA,QCAAC,AFAAA,ACAAA,CCAA,AFAA,ACAA,GCAAC,AFAAA,ACAAA,IISPF,CAAA,CHTO,AFAA,ACAA,CISPiM,AHTO9L,AFAAA,ACAAA,CISP,GHTO,AFAA,ACAA,CCAAJ,AFAAA,ACAAA,CCAA,AFAA,ACAA,GISPC,CAAA,GHTOE,AFAAA,ACAAA,MCAA,AFAA,ACAA,CCAAE,AFAAA,ACAAA,iBISPJ,CAAA,GHTO,AFAA,ACAA,MISP2P,EHTOlQ,AFAAA,ACAAA,CCAA,AFAA,ACAA,GCAAS,AFAAA,ACAAA,MCAA,AFAA,ACAA,CCAAE,AFAAA,ACAAA,IISP,CAAAJ,CAAA,EAAAiM,CAAA,OAAAhM,CAAA,IHTO,AFAA,ACAA,CCAAF,AFAAA,ACAAA,CISP4N,AHTO,AFAA,ACAA,GCAA3N,AFAAA,ACAAA,CCAA,AFAA,ACAA,IISP,CAAAyB,AHTOhC,AFAAA,ACAAA,CCAA,AFAA,ACAA,GISP,AHTOA,AFAAA,ACAAA,CISPO,AHTO,AFAA,ACAA,CISP,AHTOK,AFAAA,ACAAA,EISPsG,IHTO,AFAA,ACAA,CISP,UHTO3G,AFAAA,ACAAA,CCAA,AFAA,ACAA,WCAAE,AFAAA,ACAAA,MCAA,AFAA,ACAA,CISPD,AHTOK,AFAAA,ACAAA,CISP,IAAAN,CAAA,CAAAJ,WAAA,KAAAK,CAAA,AHTO,AFAA,ACAA,CCAAF,AFAAA,ACAAA,CCAA,AFAA,ACAA,CISPC,CAAA,AHTOA,AFAAA,ACAAA,CISPJ,AHTO,AFAA,ACAA,ECAAW,AFAAA,ACAAA,SISP,CAAA1B,AHTO,AFAA,ACAA,IISP,GHTOoB,AFAAA,ACAAA,CCAA,AFAA,ACAA,CCAAO,AFAAA,ACAAA,ICAA,AFAA,ACAA,CCAAC,AFAAA,ACAAA,GISPR,CAAA,CHTO,AFAA,ACAA,CCAAA,AFAAA,ACAAA,CCAA,AFAA,ACAA,ECAAR,AFAAA,ACAAA,CCAA,AFAA,ACAA,QISPQ,CAAA,GAAAuE,AHTOvE,AFAAA,ACAAA,CCAA,AFAA,ACAA,IISP,CAAA2P,IAAA,CAAA5P,CAAA,oBAAAC,CAAA,+CAAA4P,IAAA,CAAA5P,CAAA,IAAA0P,iBAAA,CAAA3P,CAAA,EAAAiM,CAAA;AAAA,ANJlC,AGLyC,AFAA,ACAA,SISP0D,AHTOjP,AFAAA,ACAAA,cCAAX,AFAAA,ACAAA,CCAA,AFAA,ACAA,GISPC,CAAA,EAAAiM,CAAA,MHTOjM,AFAAA,ACAAA,CCAA,AFAA,ACAA,MISPiM,AHTOjM,AFAAA,ACAAA,CISP,AHTO,AFAA,ACAA,GCAAW,AFAAA,ACAAA,CISPsL,CAAA,GAAAjM,CAAA,CAAAY,EHTO,AFAA,ACAA,CCAAA,AFAAA,ACAAA,GISP,GHTO,AFAA,ACAA,ECAAZ,AFAAA,ACAAA,CISPiM,AHTO,AFAA,ACAA,CISP,GAAAjM,CAAA,CAAAY,IHTOX,AFAAA,ACAAA,CCAA,AFAA,ACAA,CISP,UHTOU,AFAAA,ACAAA,EISPZ,CAAA,MAAA+P,AHTO,AFAA,ACAA,CISP,AHTO9P,AFAAA,ACAAA,CCAA,AFAA,ACAA,EISPwE,EHTO7D,AFAAA,ACAAA,GISP,CAAAsL,CAAA,GAAAlM,CAAA,AHTO,AFAA,ACAA,CCAAC,AFAAA,ACAAA,CCAA,AFAA,ACAA,CISPiM,CAAA,EAAAlM,CAAA,GHTOC,AFAAA,ACAAA,CISP8P,AHTO,AFAA,ACAA,CISP,CAAA/P,CAAA,IAAAC,AHTOF,AFAAA,ACAAA,CISP,CAAAC,CAAA,IHTO,AFAA,ACAA,CCAAG,AFAAA,ACAAA,KISP4P,CAAA,AHTO,AFAA,ACAA,CCAA7P,AFAAA,ACAAA,CCAA,AFAA,ACAA,OCAAY,AFAAA,ACAAA,OCAA,AFAA,ACAA,WCAAb,AFAAA,ACAAA,CCAA,AFAA,ACAA,ICAAc,AFAAA,ACAAA,eCAA,AFAA,ACAA,CCAAf,AFAAA,ACAAA,CCAA,AFAA,ACAA,ECAAC,AFAAA,ACAAA,CCAA,AFAA,ACAA,ECAAC,AFAAA,ACAAA,CCAA,AFAA,ACAA,CCAAD,AFAAA,ACAAA,CCAA,AFAA,ACAA,SCAAE,AFAAA,ACAAA,MCAA,AFAA,ACAA,CCAAa,AFAAA,ACAAA,yBCAA,AFAA,ACAA,GCAAb,AFAAA,ACAAA,MCAA,AFAA,ACAA,CCAAc,AFAAA,ACAAA,gBCAA,AFAA,ACAA,CCAAjB,AFAAA,ACAAA,CCAA,AFAA,ACAA,ECAAG,AFAAA,ACAAA,MCAA,AFAA,ACAA,CCAAa,AFAAA,ACAAA,yBCAA,AFAA,ACAA,CCAAd,AFAAA,ACAAA,CCAA,AFAA,ACAA,KCAAH,AFAAA,ACAAA,OCAA,AFAA,ACAA,CCAAI,AFAAA,ACAAA,MCAA,AFAA,ACAA,CCAAD,AFAAA,ACAAA,CCAA,AFAA,ACAA,GCAAY,AFAAA,ACAAA,OCAA,AFAA,ACAA,WCAAb,AFAAA,ACAAA,CCAA,AFAA,ACAA,ICAAE,AFAAA,ACAAA,MCAA,AFAA,ACAA,CCAAe,AFAAA,ACAAA,cCAA,AFAA,ACAA,CCAAlB,AFAAA,ACAAA,CCAA,AFAA,ACAA,ECAAC,AFAAA,ACAAA,CCAA,AFAA,ACAA,ECAAE,AFAAA,ACAAA,MCAA,AFAA,ACAA,CCAAI,AFAAA,ACAAA,wBCAA,AFAA,ACAA,CCAAL,AFAAA,ACAAA,CCAA,AFAA,ACAA,ECAAD,AFAAA,ACAAA,CCAA,AFAA,ACAA,iBCAAD,AFAAA,ACAAA,CCAA,AFAA,ACAA;AISP,ANHlC,AGNyC,AFAA,ACAA,SISPyP,AHTO1O,AFAAA,ACAAA,gBCAAf,AFAAA,ACAAA,CCAA,AFAA,ACAA,ECAAC,AFAAA,ACAAA,CCAA,AFAA,ACAA,EISPA,AHTOC,AFAAA,ACAAA,CISP,AHTO,AFAA,ACAA,EISP8P,CAAA,QAAA9P,CAAA,AHTOD,AFAAA,ACAAA,CCAA,AFAA,ACAA,GCAAkB,AFAAA,ACAAA,OISPlB,CAAA,MHTO,AFAA,ACAA,CCAAA,AFAAA,ACAAA,CCAA,AFAA,ACAA,MCAAD,AFAAA,ACAAA,CCAA,AFAA,ACAA,GCAAG,AFAAA,ACAAA,MCAA,AFAA,ACAA,CCAAe,AFAAA,ACAAA,OISPvB,MAAA,CHTO,AFAA,ACAA,CCAAK,AFAAA,ACAAA,CCAA,AFAA,ACAA,CISPC,CAAA,AHTOA,AFAAA,ACAAA,CISPN,AHTO,AFAA,ACAA,ICAAyB,AFAAA,ACAAA,EISP,CAAAxB,EHTO,AFAA,ACAA,ECAAM,AFAAA,ACAAA,CCAA,AFAA,ACAA,ECAAM,AFAAA,ACAAA,CISP,KAAAP,CAAA,GHTO,AFAA,ACAA,MCAAoB,AFAAA,ACAAA,YCAA,AFAA,ACAA,MCAAC,AFAAA,ACAAA,CISPpB,CAAA,MHTO,AFAA,ACAA,EISPF,CAAA,EAAA+P,CAAA,EAAAxO,CAAA,CHTOvB,AFAAA,ACAAA,CISPiQ,AHTO,AFAA,ACAA,CISP,AHTOhQ,AFAAA,ACAAA,CCAA,AFAA,ACAA,CISPiM,CAAA,EHTOhM,AFAAA,ACAAA,CCAA,AFAA,ACAA,ECAAF,AFAAA,ACAAA,CCAA,AFAA,ACAA,CISPkQ,CAAA,OAAAxQ,CAAA,iBAAA6B,CAAA,IAAArB,CAAA,GAAAA,CAAA,CAAAwB,IAAA,CAAAzB,CAAA,GAAAkQ,IAAA,QAAAH,CAAA,QAAA7P,MAAA,CAAAD,CAAA,MAAAA,CAAA,UAAAgQ,CAAA,uBAAAA,CAAA,IAAAlQ,CAAA,GAAAuB,CAAA,CAAAG,IAAA,CAAAxB,CAAA,GAAAkQ,IAAA,MAAAlE,CAAA,CAAAzL,IAAA,CAAAT,CAAA,CAAAoB,KAAA,GAAA8K,CAAA,CAAArL,MAAA,KAAAmP,CAAA,GAAAE,CAAA,iBAAAjQ,CAAA,IAAAP,CAAA,OAAAqQ,CAAA,GAAA9P,CAAA,yBAAAiQ,CAAA,YAAAhQ,CAAA,CAAAmQ,MAAA,KAAAJ,CAAA,GAAA/P,CAAA,CAAAmQ,MAAA,IAAAlQ,MAAA,CAAA8P,CAAA,MAAAA,CAAA,2BAAAvQ,CAAA,QAAAqQ,CAAA,aAAA7D,CAAA;AAAA,ANFlC,AGPyC,AFAA,AGAzC,AFAyC,SISPsD,AHTOrO,AFAAA,ACAAA,eCAAjB,AFAAA,ACAAA,CISPD,AHTO,AFAA,ACAA,CISP,OHTOsB,AFAAA,ACAAA,CISPkD,AHTO,AFAA,ACAA,GCAAjD,AFAAA,ACAAA,EISP,CAAAkD,OAAA,CAAAzE,CAAA,AHTO,AFAA,ACAA,CCAAC,AFAAA,ACAAA,CCAA,AFAA,ACAA,QISPD,CAAA,IATlC,mBHAyCR,AFAAA,ACAAA,OCAA,AFAA,ACAA,CCAA8B,AFAAA,ACAAA,CCAA,AFAA,ACAA,ICAAA,AFAAA,ACAAA,CCAA,AFAA,ACAA,GCAAA,AFAAA,ACAAA,CCAA,AFAA,ACAA;AIWzC,ANHA,AGRyC,AFAA,AGCzC,AFDyC,SCAAC,AFAAA,ACAAA,aCAAtB,AFAAA,ACAAA,CCAA,AFAA,ACAA,ECAAD,AFAAA,ACAAA,CCAA,AFAA,ACAA,oBCAAR,AFAAA,ACAAA,OCAA,AFAA,ACAA,CCAAS,AFAAA,ACAAA,CCAA,AFAA,ACAA,MCAAA,AFAAA,ACAAA,CCAA,AFAA,ACAA,SCAAA,AFAAA,ACAAA,CCAA,AFAA,ACAA,MCAAF,AFAAA,ACAAA,CCAA,AFAA,ACAA,GCAAE,AFAAA,ACAAA,CCAA,AFAA,ACAA,CCAAP,AFAAA,ACAAA,MCAA,AFAA,ACAA,CCAA8B,AFAAA,ACAAA,WCAA,AFAA,ACAA,kBCAAzB,AFAAA,ACAAA,CCAA,AFAA,ACAA,QCAAuB,AFAAA,ACAAA,CCAA,AFAA,ACAA,GCAAvB,AFAAA,ACAAA,CCAA,AFAA,ACAA,CCAA0B,AFAAA,ACAAA,ICAA,AFAA,ACAA,CCAAxB,AFAAA,ACAAA,CCAA,AFAA,ACAA,ECAAD,AFAAA,ACAAA,CCAA,AFAA,ACAA,gCCAAR,AFAAA,ACAAA,OCAA,AFAA,ACAA,CCAA8B,AFAAA,ACAAA,CCAA,AFAA,ACAA,UCAAA,AFAAA,ACAAA,CCAA,AFAA,ACAA,YCAAI,AFAAA,ACAAA,SCAA,AFAA,ACAA,yECAA1B,AFAAA,ACAAA,CCAA,AFAA,ACAA,GCAAjB,AFAAA,ACAAA,MCAA,AFAA,ACAA,GCAA4C,AFAAA,ACAAA,MCAA,AFAA,ACAA,ECAA1B,AFAAA,ACAAA,CCAA,AFAA,ACAA;AIYzC,ANHA,AGPA,AFAA,AGAA,AFAA;AIWA,ANHA,AGPA,AFAA,AGAA,AFAA;AIWA,ANHA,AGPA,AFAA,AGAA,AFAA;AIWA,ANHA,AGPA,AFAA,AGAA,AFAA;AIWA,ANHA,AGPA,AFAA,AGAO,AFAP,SEAgByF,gBAAgBA,CAAEC,IAAI,EAAE;AJQxC,AGPA,AFAA,ACAA,EEAE,IAAMC,aAAa,GAAG,SAAhBA,aAAaA,CAAI1C,KAAK,EAAE2C,SAAS,EAAK;AEW9C,AHVA,AFAA,ACAA,IEAI,IAAI,CAAC3C,KAAK,CAAC2C,SAAS,CAAC,EAAE,OAAO,EAAE;AJQpC,AGPO,AFAA,ACAA,IECH,IAAI,CDDQ7B,AFAApC,ACAA4B,kBAAkBA,CAAEC,GCAEO,CAAEC,CFAArC,CAAEC,ACAA,EAAEC,ECAE,EAAEA,MFAM,ACAA,EDAEA,ACAA,ECAE,EAAE,MFAM,EAAE;AKWpE,ANHA,EGPE,AFAA,ACAA,IECI,GDDGmC,AFAApC,ACAA4B,CECC,KDDK,ADAA,CCAC1B,ADAAA,CECCmB,IHDI,CEAC,AFAAnB,AGCA,AFDA,CCAC,ACCA8D,AFDA,KDAK,CAAC,GGCG,CDDR7D,ACCS,AFDTA,GCAG,ADAA,ECAEkB,ACCS,AFDTjB,CDACD,GAAG,ACAA,CCAC,CFACC,ACAG,CCAC,CCCO,EHDP,AGCS,EHDJ;AKW5C,ANHA,IGPI,AFAA,ACAA,ICAI,AFAEC,AGCF,AFDEA,CCADgB,KAAK,CAACgB,ACCAhB,EHDI,ACAA,GDAG,AGCF,AFDE,CECD2C,GHDCjH,ACAAA,KCAO,CCCC,CDDC,ACCA,CAACoG,KAAK,CDDChD,ACCA,GDDG,ACCA,CAAC,CAACiB,GHDP,AGCU,AFDV,CECW,CHDVhB,ACAAA,IDAI,ACAA,CDACE,ACAAA,IDAI,AGCCF,AFDD,CDAC,ACAA,GECI;AEUnD,ANHA,AKnBA,IFaI,AFAA,ACAA,ICAMC,AFAFJ,ACAAA,EED2C,ODChC,ACDoCG,CHCrC,ACAA,CDACG,ACAAA,CCAG,CCDqC,CAAC0D,EDCtClH,ECD0C,CHCrC,AGDsC,AFCtC,CDACsD,AGDsC,AFCtCA,SDAS,ACAA,CDAC,ACAA,EDAE,ACAA,MCAJ,EAACgB,KAAK,CAACgB,cAAc,CAAC;AGU1D,ANHA,AKnBA,IFcI,EFDE,ACAA,ECCEpC,ACH0D,EHEtDO,AGFuD,AFEvDA,QCCM,AFDE,ACAA,CCCDD,EFDIH,ACAAA,IDAI,ACAA,CDACK,ACAAK,CCCD,CAACT,CFDG,GCAG,EDAE,GECC,ADDE,CCCD,EAAE,AFDE,GCAG;AIU7C,ANHA,AKnBA,MFcM,AFDA,AGFA,AFEA,ICCIiC,AFDA,ACAA,CDACnC,ACAAA,GDAG,ACAA,CDACE,ACAAA,ICCI,GAAG,EAAE,AFDA,ACAA,CDAC,ACAA,EDAE,ACAA;AFO3B,AKnBA,IAAMgE,EFcA,ACHA,EHEElE,ACAAA,ECCEkB,CFDC,ACAA,CDAChB,ACAAA,CEFCgB,EDGE,CAACkB,CEdG,CDWD,CAACyB,CCXG,CJaD,ACAA,CDAC,ACAA,GDAG,ACAA,GEFG,CAAC,ODGO,EAAE;AGStC,ANHA,CMGC,CDtBCM,EDWE,CAAC,CAAC,EDGE,EFDE5D,ACAAA,CISC8N,CHRGhM,CGQD,AFXAY,EEWE,EDtBE,CDWC,CCXC,CACf,ADUgB,CHEC,ACAA,EDAE,ACAA,CDAC,ACAA,ECCI,GAAG,OAAO/B,KAAK,CAACkB,oBAAoB,KAAK,QAAQ,GACjEE,IAAI,CAACC,KAAK,CAACrB,KAAK,CAACkB,oBAAoB,CAAC,GAAGlB,KAAK,CAACkB,oBAAoB;AHK/E,EMGE,EDtBIgC,EDWA,EDKE,IEhBM,AFgBF5B,AFJchC,ACAAA,CEDb,CCXG,CDWD,CHCe,ACAA,CCIb,CAACiC,AFJcxC,ACAAA,IGZR,AJYY,ACAA,CDACQ,ACAAA,ECIZ,CAAC4B,MFJoB,ACAA,QCIN,CAAC,IAAIA,cAAc,CAACzD,MAAM,GAAG,CAAC,EAAE;AHIxE,EMGE,EDvBwByF,ADYtB,MDKMlC,EFLsCzB,ACAAA,KGZT,EAAE,AFiBtB,AFLoC,ACAA,EDAET,ACAAA,CCKnCoC,GFLuC,ACAA,CDACxF,ACAAA,IDAI,ACAA,MCK9B,CAACoE,GAAG,CAAC,UAAAyB,QAAQ;AHIjD,EMGE,ADxBgD,ADahD,CCbiD,ADahD,ECZC,OFgB6C,AFLmB/B,ACAAA,MDAM,ACAA,CCKrB+B,CFLuBrC,ACAAA,OCKf,CAACxD,IAAI;ECFhE,ECdIuH,KDcGT,CDEyD,AFLmB,ACAA,CDAC,ACAA,CGXxE,AFgBqD,AFLoB,ACAA,CCKnBtF,ACFvD,CCdG,ADcF4C,GAAG,CAAC,CDEwD,CAAC0B,EEhBnD,KFgB0D,CAAC,ACFhEzB,KAAK,EAAK;AJQ7B,EMGE,EDzBwBmD,ADetB,IDEI,ACFEN,EHHAnD,ACAAA,OGZ6B,EAAE,GDejB,CHHD,ACAA,EDAE,AGGDlC,AFHC,CDAC,ACAA,YEGF,KAAQwC,KAAK,CAAE;AJQvC,EKvBkD,CAAC,CDgB/C,CCfA,CFiBE,ECFI8C,EHHAnD,ACAAA,MDAM,ACAA,EDAER,ACAAA,KEGO,GHHC,AGGE,AFHF,CEGG,EHHA,ACAA,CDAC,ACAA,GDAG,ACAA,CEGG,EAAE,WAAW,EAAE,OAAO,EAAE,SAAS,CAAC;AJQtE,EMGE,ED1BI+D,ADiBFJ,EDEE,EFNE,ACAA,CDAC,ACAA,CCMCpB,EEnBI,EAAE,KDiBG,CAAC/D,CDEC,GAAG,CEnBG,CFmBD,CCFC,CAAC,UAAAoF,KAAK,EAAI;AJOrC,EMGE,ED3B2BI,EFoBvB,AFNA,AGIAN,AFJA,CDAC,ACAA,GCMG7C,GFNG,ACAA,ECME,CAAC2B,CEpB0B,EAAE,CDkBxB,CAACoB,KAAK,CAAC,CDEC,EAAE,ACFAL,aAAa,CAAC1C,KAAK,EAAE+C,KAAK,CAAC;AJOzD,EMGE,AD5BuD,CAAC,CDmBtD,CClBA,ADkBC,CAAC,EDEE,AFNAjE,ACAAA,GDAG,ACAA,CCMC,AFNAE,ACAAA,SDAS,ACAA,CDAC,ACAA,CDACK,ACAAA,WDAW,ACAA,CDAC/B,ACAAA,IDAI,ACAA,CDAC,ACAA;AFWxC,IKzBM4F,ADoBF,MDCMxB,AFNApC,ACAAA,CEKCuD,CCpBG,EAAE,AJeF,ACAA,EDAE9D,ACAAA,IDAI,ACAA,CCMC,AFNAQ,ACAAA,GCMG,CCDC,CCpBG,EFqBAqC,EFNE,ACAA,ECME,CAAC5B,KAAK,CAAC2B,YAAY,CAAC,CAACE,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AHKhF,EMGEsL,AFRA,CAAC,CCrB2BjK,ADqB1B,IDCI,CGOC,AHPA,CGOCkK,AHPA,AFNA7N,ACAAA,GIaG,CAAC,CACV2N,EAAE,AD9BqC,AFsB1BpL,AFNA,ACAA,CIcVuL,CD9BsC,AJgB1BvO,ACAAA,EIcT,CAAC,AHRW,CFNC,ACAA,CCMC,AFNApD,ACAAA,IDAI,ACAA,qBIcU,EAAEwR,EAAE,CAACI,QAAQ,CAAC,EAChDJ,EAAE,CAACG,GAAG,CAAC,2BAA2B,EAAEH,EAAE,CAACI,QAAQ,CAAC,EAChDJ,EAAE,CAACG,GAAG,CAAC,qBAAqB,EAAEH,EAAE,CAACI,QAAQ,CAAC,EAC1CJ,EAAE,CAACG,GAAG,CAAC,uBAAuB,EAAEH,EAAE,CAACI,QAAQ,CAAC,CAC7C,CAAC,CAACC,IAAI,CAAC,UAAA/I,IAAA,EAAgD;ANP1D,AILA,ECtB0D,CAAC,CCkCD,ADjCvD,ICiCuDC,EHXhDhD,AFNAjC,ACAAA,GIiBgD,GAAAkF,ALjB1C,ACAA,EDAExF,ACAAA,GCMG,GAAGa,KAAK,CGW6B,AHX5B2B,CGW4B8C,IAAA,OHXhB;EEpBxCrB,IC+BmBzE,EHVb,AFNA,ACAA,CDAC,ACAA,CDAC,ACAA,QIgBuB,GAAA+F,AD/BZ,KC+BY,MD/B/BtB,mBAAmBA,CAAA,EAAI;AL0BzB,IKzBI,EC8B+BvD,AHT7B,EErBIwD,AJgBFvE,ACAAA,EIc+B,CLd5B,ACAA,CDACE,ACAAA,CIc2B0F,KAAA,GD9BhB,AJgBF,ACAA,CDAC,ACAA,CDAChF,ACAAA,CGhBG,CAAC,CAAC,UJgBQ,ACAA,EDAE,ACAA;AFUtC,IKxBI,EC4BqCqB,AHPnCjC,EErBE,AJeA,ACAA,CGfCmE,AFqBA,CAACjE,EGOqC,ALbnCG,ACAAA,GIamCuF,IHP5B,CGO4B,AHP3B,AFNA,ACAA,EDAE5F,ACAAA,CCMC,CErBC,CAACnB,AJeA,ACAA,CDACqB,ACAAA,MGfM,CAAC,EJeE,ACAA,CDAC,ACAA,CDACW,ACAAA,MGfJ2D,AJeU,ACAA,EDAE,ACAA,IGfN,EAAI;ALyB3C,MMGiD/C,AD3B3C8C,AJeA,ACAA,ECMErB,IGM+C,GAAA0C,CHNvC,EAAE1E,CErBC,CC2BoC,GHNhC,CAACgC,IErBL/F,IFqBa,EErBb,CAASqH,CFqBQ,EAAE,GErBJ,CAACJ,QAAQ,CAACK,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGF,MAAM,CAACJ,QAAQ,CAACO,KAAK,CAAC,CAAC,CAAC,EAAG,GAAG,CAAC;IC4BjG5D,ALZA,ACAA,EGfEwD,EC2BE,AHNApB,GGMG,IAAAO,GHNO,CErBC,CFqBCxC,GErBD/D,EFqBM,CAACgG,GErBP,CAAIqB,MAAM,AFqBO,CErBNJ,GFqBU,CAAC,IGMd,AD3BW,EC2BVrD,IAAI,CAAC,ID3Ba,GAAG,CAAC;ALyBlD,IMII,ALZA,ACAA,EGhBEwD,EC4BIzE,AHPFsD,GFLGpD,ACAAA,GDAG,ACAA,IIYM,CD5BD,EC4BIe,IAAI,CAAChB,AD5BT5C,CFqBQ,EAAEgF,GGOK,AD5Bf,CC4BgB,AD5BTqC,KFqBY,CErBN,CAACJ,GC4BGpE,GAAG,EAAEkB,AD5BA,CAACuD,IC4BI,EAAK,AD5BH,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGF,MAAM,CAACJ,QAAQ,CAACO,KAAK,CAAC,CAAC,CAAC,EAAG,GAAG,CAAC;ALyBnG,ECRE,ACAA,CDAC,ACAA,CGhBC,CAAC,AJgBA,ACAA,CIYC,AD5BA,AJgBA,ACAA,CDAC,ACAA,CCKC/B,AFLA,ACAA,EIYE,CAAC1B,KAAK,CAACrE,EHPE,EGOE,AHPA+F,EGOE,OAAO5C,EHPE,CGOC;ANHjC,ACRA,ACAA,IGfI,EC4BE,EHREqD,EGQIvG,CD5BDyH,GFoBG,EAAErD,CGQG,GAAGnE,CHRD,CAACsG,EEpBE,EC4BI,CAACnC,CHRD,IGQM,CAACrE,IAAI,CAAC;ANJxC,EKvBE,CAAC,GC4BG,EHREyG,EGQIpD,KHRG,EAAEgB,EGQI,GAAGpE,AHRF,CAACwG,MGQQ,CAAClG,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC;ANJzE,ACRA,ACAA,EGdEuH,IC4BI,AHTA,CAAC,GGSG,CAAC5E,GAAG,CAACI,ED5BE,MC4BM,CAACF,ID5BtB0E,KC4B+B,CAAC,IAAI1E,KD5BrB0E,CAAEC,GC4B4B,CAACf,IAAI,CAAC,CAAC,AD5BzB,EAAE5C,GC4B4B,EAAE,AD5BzB,EC4B2BlB,AD5BzB,GC4B4B,CAACxB,IAAI,CAAC0B,SAAS,CAAC;ANLlF,ACRA,ACAA,IGdI,AFmBA,EGSE,ED5BE,CAACiE,IC4BInE,GAAG,QD5BQ,CAACnB,OAAO,CAAC,UAAA2F,MAAM,EAAI;ALuBpC,ACRP,ACAA,IIcI,AHTA,CGSC,CD5BC,CC4BC,EAAE,ANNO5H,CMMN,AD5BEuC,CFmBDa,GAAG,CEnBG,GAAGkB,KLsBUtE,AKtBL,CLsBOC,AKtBN2H,ILsBU,EAAE,AKtBN,CAACH,aAAa,CAAC;AJe/C,ACAA,EFQE,AGHA,CAAC,CGUC,CHVC,CHGCvH,AKtBA,AFmBA,CAAC,CGUG6E,AHVF,EEnBImD,GLsBC,GAAG/H,GMOK,AD7BA,GC6BG,ANPF,CAACF,GMOC2E,CNPG,CAAC,EKtBPrE,MAAA,CAAWqH,MAAM,CAACJ,QAAQ,CAACK,MAAM,CC6BZ,AD7Ba,CAAC,CC6BbhD,AD7Bc,CAACiD,KC6BT,EAAE5E,ID7BkB,CAAC,CAAC,GAAG0E,CC6Bb,CAAC,ID7BkB,CAACJ,QAAQ,CAACO,KAAK,CAAC,CAAC,CAAC,CAAE;AFoBpG,AFLA,ACAA,EFQE,EMOE5D,ENPI/D,AKtBF,EC6BE,ED7BI+H,CC6BD,IAAArD,ID7BU,CLsBC,GAAG,EKtBJvE,MAAA,CAAMqH,MAAM,CAACJ,KC6BV,EAACrD,ANPuB,CKtBN,GC6Bb,EAAEY,KD7BkB,MC6BP,CAAC;ALd3C,ACAA,EFQE,EMQE,ENRI1E,AKrBF,EC6BI+D,ED7BA,OAAO7B,CLqBG,GAAGrC,CKrBD,IC6BM,CD7BD,CLqBG,CMQC,ANRAI,IMQA0C,CNRK,CAAC5C,AKrBF,IAAI,CAACgI,KAAK,CAAC7F,GLqBK,CAAC,CKrBD,CAAC,EAAE,0BC6BC,EAACU,YAAY,EAAEC,UAAU,CAAC;AHVjF,AFLA,ACAA,EFSE,EMOEiB,ENPE9D,EMOE,AD7BA4H,GC6BG,IAAA/D,GNPO,AKtBA,CAACgE,CLsBChI,OAAO,CKtBC,CAAC,ILsBFK,AKtBMgC,KAAK,CLsBX,CAAMlC,YAAY,CAAC,CAAC,CAAC,EMOlB,EAAC8D,GNPiB5D,CMOb,EAAE6D,GNPW,CAAI/D,YAAY,CAAC,CMOV,ANPW,CMOV,ANPW,CAAE;AGHrE,AFLO,ACAA,EFSL,EMQE,IAAM0R,AD9BF9J,CLsBC/H,ACTOgE,ACAAY,OFSA,CAACtE,CKtBC,CAAC2H,GHaUrD,CAAEX,IIiBF,AJjBM,CFSP,AKtBA,AJaOD,CDSN,AKtBA,AJaQC,ACAAY,CIiBL,ANRF,CAACtE,AKtBA,EJaU,CKiBT2E,CLjBWhB,GDSL,CAAC,CETS,EAAE,WFSG,ACTQ,EDSN,ACTQ,EDSN,CAAC,6BMQJ,EAACiB,MAAM,EAAEnC,UAAU,CAAC;ANP1E,AGJA,EFLE,ACAA,EIiBEiB,ED9BE,EC8BE,CLjBCA,ACAAA,EIiBE,ELjBE,ACAA,CDACE,ACAAA,CIiBHsC,ELjBM,ACAA,CDAC,ACAA,UDAArC,ACAAA,KDAK,ACAA,EDAI,ACAA,iCIiBM,EAACH,IAAI,EAAE4N,mBAAmB,CAAC;AHX5D,IGaI,AD/BA,AJaA,ACAA,CGbC,CAAC,EC+BIC,ALlBAzN,ACAAA,aDAa,ACAA,EIkBE,CLlBFzC,ACAAA,EIkBK,IAAAqH,OLlBL,ACAA,KDAQ7E,ACAAA,KDAK,ACAA,CDAE,ACAA,sBIkBa,EAACH,IAAI,CAAC;AHZzD,IGaI,AD9BA,AJYA,ACAA,IIkBM8N,ALlBA3O,ACAAA,GGZC2E,MC8BQ,ALlBA,ACAA,GIkBG,ALlBA,ACAA,CGZD,GC8BCgC,ALlBAjK,ACAAA,sBDAc,ACAA,EDACsE,ACAAA,KDAK,ACAA,CDACrE,ACAAA,IDAI,ACAA,CDAC,ACAA,GIkBL,EAACkE,IAAI,CAAC;AHZjD,EEjBE,CAAC,CC+BC,ALlBAI,ACAAA,IIkBM2N,SLlBO,ACAA,CDAC1N,ACAAQ,QIkBU,EJlBA,CIkBG,EJlBA,EIkBAyG,CLlBG,GAAG,iCKkBc,EAACtH,IAAI,CAAC;AHbzD,EEhBEkE,EC+BE,ELnBE5D,ACAAQ,EImBIwI,WD/BS,AHYA,EAAE1I,EImBI,GAAG,ALnBF,EAAEX,EKmBAmJ,AD/B1BlF,EHY8B,CAAC/E,SAAS,CAAC,GDAG,ACAAyB,CGZ3BsD,AJY4B/E,CIZ1B2E,QJYmC,CAAC,ACAA,CGZ1B,AHY2B3E,EGZzB,AJY2Bc,KKmBd,EAACD,AJnBoB,CAAC,CAACR,EImBlB,CAAC,MLnB0B,CAACL,CCAC,GAAG,EAAE,GDAG,CAAC,CAACK,WAAW,GAAG,EAAE;AEKnG,IGeH,AD/BA,EJYEe,ACAAQ,EImBIiN,AD/BF,CAAC5K,AFgBOZ,WGeM,EJnBA,CImBG,CD/BD,AHYA5B,CGZC9C,EC+BA4L,ELnBI,EEISlH,AFJPvC,CIZC,AFgBQD,CEhBP,EHYE,CCIS,ADJRb,ECIUsD,KEhBbgB,EHYY,CAAC,GGZP,AJYU,ACAA7C,CDACzB,CIZP,CFgBiB,EAAE,KGetB,ALnBmB,CAAC,ACAA,CImBnBa,AJnBoBb,EDAEc,EKmBlB,CAAC,IJnBwB,CAAC,CAACJ,SDAS,CAACV,GCAG,GAAG,CAAC,EDAE,CAAC,CAACU,aAAa,GAAG,CAAC;EEK5G,EGgBE,EDhCE,AJYAW,ACAAQ,EIoBIiN,CHhBDjO,CEhBG+D,GFgBC,CAAC7D,CDJC,ECIE,ADJAU,CCIC,CEhBG,GJYC,CKoBG,CLpBDX,EKoBI,EHhBVE,ADJU,CAAChB,CIoBD6L,ADhCP5O,GFgBE,EAAI,CEhBN,CAAWqH,CHYM,CAAC,GDAG,ACAA7C,CGZJ,AJYKzB,CIZJkE,QAAQ,AJYK,CIZJK,AJYK,ACAA,CAACvE,EDAEc,GIZF,CAAC,CAAC,CAAC,CAAC0D,AHYK,CAAC,CIoBlB,AJpBmB7D,EIoBlBE,IAAI,AJpBoB,CIoBnB,EDhCiB,AJYK,ACAA,CGZJ,AJYKb,CIZJ,GAAGsE,KJYU,CIZJ,AJYK,CIZJJ,AJYKvD,MAAM,EIZH,CAAC8D,AJYK,KIZA,CAAC,CAAC,CAAC,CAAE;ICiChG4H,AHhBA,AFJA,ACAA,CDAC,ACAA,CGZC,EFgBIpL,EEhBE4D,CCgCD,CAACyH,GAAG,CAACzL,GDhCK,CCgCD,CAAC,AHhBE,GAAArC,CEhBFvB,MAAA,CAAMqH,KFgBJ,CEhBU,CAACJ,GFgBHlD,KEhBW,AFgBN,CAAE,SEhBW;ICiC7CqL,AHhBA,AFHA,ACAA,EGbE,EFgBIrM,EEhBEgF,CCgCD,ALnBA/D,ACAAA,CImBCqL,GAAG,CAACwC,CDhCG,AFgBA,GAAG,IAAApS,AFHE,ACAA,EGbLO,KCgCY,CAAC,ADhCb,CAASqH,MAAM,CAACJ,MFgBC,EEhBO,AFgBNlD,CEhBOuD,IFgBF,CAAC5H,CEhBO,CAAC,CAAC,CAAC,AFgBN,CEhBO6H,AFgBN,WEhBiB,CAAC,CAAC,GAAGF,MAAM,CAACJ,QAAQ,CAACO,KAAK,CAAC,CAAC,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","file":"src.e31bb0bc.js","sourceRoot":"..\\src","sourcesContent":["\n// /**\n//  * Generates the SVG element g which will contain the data visualisation.\n//  *\n//  * @param {object} margin The desired margins around the graph\n//  * @returns {*} The d3 Selection for the created g element\n//  */\n// export function generateG (margin) {\n//   return d3.select('.graph')\n//     .select('svg')\n//     .append('g')\n//     .attr('id', 'graph-g')\n//     .attr('transform',\n//       'translate(' + margin.left + ',' + margin.top + ')')\n// }\n\n// /**\n//  * Sets the size of the SVG canvas containing the graph.\n//  *\n//  * @param {number} width The desired width\n//  * @param {number} height The desired height\n//  */\n// export function setCanvasSize (width, height) {\n//   d3.select('#heatmap').select('svg')\n//     .attr('width', width)\n//     .attr('height', height)\n// }\n\n// /**\n//  * Appends an SVG g element which will contain the axes.\n//  *\n//  * @param {*} g The d3 Selection of the graph's g SVG element\n//  */\n// export function appendAxes (g) {\n//   g.append('g')\n//     .attr('class', 'x axis')\n\n//   g.append('g')\n//     .attr('class', 'y axis')\n// }\n\n/**\n * Cleans the name to avoid mismatching during the comparison of movie names\n *\n * @param {string} name The movie name to clean\n * @returns {string} the cleaned movie name\n */\nexport function cleanMovieName (name) {\n  let nameStr = String(name)\n  const articlePattern = /^(.+),\\s+(The|A|An)$/i\n  const articleMatch = nameStr.match(articlePattern)\n\n  if (articleMatch) nameStr = `${articleMatch[2]} ${articleMatch[1]}`\n  return nameStr.toLowerCase().replace(/[^a-z0-9\\s]/g, '')\n}\n","import { cleanMovieName } from './helper'\r\n\r\n/**\r\n * Gets the data for golden globes nominations for all the movies in the top 250 in IMDB\r\n *\r\n * @param {object[]} goldenGlobes The golden globes data to analyze\r\n * @param {object[]} movieNames The names of the top 250 movies on IMDB\r\n * @returns {object} The golden globes data of the top 250 movies on IMDB\r\n */\r\nexport function getGoldenGlobesMovieData (goldenGlobes, movieNames) {\r\n  return goldenGlobes.reduce((acc, item) => {\r\n    const cleanName = cleanMovieName(item.film)\r\n\r\n    if (movieNames.includes(cleanName)) {\r\n      const isWinner = item.win === 'True'\r\n      if (!acc[cleanName]) {\r\n        acc[cleanName] = {\r\n          nominations: [{ year: item.year_film, nominee: item.name, winner: isWinner }],\r\n          nbNominations: 1,\r\n          nbWins: isWinner ? 1 : 0\r\n        }\r\n      } else {\r\n        acc[cleanName].nominations.push({\r\n          year: item.year_film,\r\n          nominee: item.name,\r\n          winner: isWinner\r\n        })\r\n\r\n        acc[cleanName].nbNominations++\r\n        if (isWinner) acc[cleanName].nbWins++\r\n      }\r\n    }\r\n\r\n    return acc\r\n  }, {})\r\n}\r\n\r\n/**\r\n * Add the data collected from the golden globes awards to the imdb data\r\n *\r\n * @param {object[]} imdb The data of the top 250 movies on IMDB\r\n * @param {object} goldenGlobesMovies The golden globes data of the movies in the top 250 on IMDB\r\n * @returns {object} The imdb data concatenated with the golden globes data\r\n */\r\nexport function addGoldenGlobesData (imdb, goldenGlobesMovies) {\r\n  return imdb.map(movie => {\r\n    const enhancedMovie = { ...movie }\r\n    const cleanName = cleanMovieName(movie.name)\r\n\r\n    enhancedMovie.goldenGlobesData = {\r\n      goldenGlobesNominees: goldenGlobesMovies[cleanName] ? goldenGlobesMovies[cleanName].nominations : [],\r\n      goldenGlobesNominations: goldenGlobesMovies[cleanName] ? goldenGlobesMovies[cleanName].nbNominations : 0,\r\n      goldenGlobesWins: goldenGlobesMovies[cleanName] ? goldenGlobesMovies[cleanName].nbWins : 0\r\n    }\r\n\r\n    return enhancedMovie\r\n  })\r\n}\r\n","import { cleanMovieName } from './helper'\n\n/**\n * Gets the data for oscar nominations for all the movies in the top 250 in IMDB\n *\n * @param {object[]} oscars The oscars data to analyze\n * @param {string[]} movieNames The names of the top 250 movies on IMDB\n * @returns {object} The oscars data of the top 250 movies on IMDB\n */\nexport function getOscarsMovieData (oscars, movieNames) {\n  return oscars.reduce((acc, item) => {\n    const cleanName = cleanMovieName(item.film)\n\n    if (movieNames.includes(cleanName)) {\n      const isWinner = item.winner === 'True'\n      if (!acc[cleanName]) {\n        acc[cleanName] = {\n          nominations: [{ year: item.year_film, nominee: item.name, winner: isWinner }],\n          nbNominations: 1,\n          nbWins: isWinner ? 1 : 0\n        }\n      } else {\n        acc[cleanName].nominations.push({\n          year: item.year_film,\n          nominee: item.name,\n          winner: isWinner\n        })\n\n        acc[cleanName].nbNominations++\n        if (isWinner) acc[cleanName].nbWins++\n      }\n    }\n\n    return acc\n  }, {})\n}\n\n/**\n * Add the data collected from the oscars awards to the imdb data\n *\n * @param {object[]} imdb The data of the top 250 movies on IMDB\n * @param {object} oscarMovies The oscars data of the movies in the top 250 on IMDB\n * @returns {object} The imdb data concatenated with the oscars data\n */\nexport function addOscarsData (imdb, oscarMovies) {\n  return imdb.map(movie => {\n    const enhancedMovie = { ...movie }\n    const cleanName = cleanMovieName(movie.name)\n\n    enhancedMovie.oscarsData = {\n      oscarNominees: oscarMovies[cleanName] ? oscarMovies[cleanName].nominations : [],\n      oscarNominations: oscarMovies[cleanName] ? oscarMovies[cleanName].nbNominations : 0,\n      oscarWins: oscarMovies[cleanName] ? oscarMovies[cleanName].nbWins : 0\n    }\n\n    return enhancedMovie\n  })\n}\n","import { cleanMovieName } from './helper'\r\n\r\n/**\r\n * Gets the additional data required for all the movies in the top 250 in IMDB\r\n *\r\n * @param {object[]} movies The additional movie data to analyze\r\n * @param {object[]} movieNames The names of the top 250 movies on IMDB\r\n * @returns {object} The additonal movie data of the top 250 movies on IMDB\r\n */\r\nexport function getAdditionalMovieData (movies, movieNames) {\r\n  return movies.reduce((acc, movie) => {\r\n    if (!movie.original_title) return acc\r\n\r\n    const cleanName = cleanMovieName(movie.original_title)\r\n\r\n    if (movieNames.includes(cleanName)) {\r\n      let companies = []\r\n      if (movie.production_companies) {\r\n        const pCompaniesData = typeof movie.production_companies === 'string'\r\n          ? JSON.parse(movie.production_companies) : movie.production_companies\r\n\r\n        if (Array.isArray(pCompaniesData) && pCompaniesData.length > 0) {\r\n          companies = pCompaniesData.map(pCompany => pCompany.name).filter(Boolean)\r\n        }\r\n      }\r\n\r\n      let releaseDate = ''\r\n      if (movie.release_date) {\r\n        try {\r\n          releaseDate = new Date(movie.release_date).toISOString().split('T')[0]\r\n        } catch (error) {\r\n          releaseDate = movie.release_date\r\n        }\r\n      }\r\n\r\n      acc[cleanName] = {\r\n        keywords: movie.keywords || '',\r\n        popularity: movie.popularity || 0,\r\n        productionCompanies: companies,\r\n        releaseDate: releaseDate,\r\n        budget: movie.budget,\r\n        revenue: movie.revenue\r\n      }\r\n    }\r\n    return acc\r\n  }, {})\r\n}\r\n\r\n/**\r\n * Add the additional movie data to the imdb data\r\n *\r\n * @param {object[]} imdb The data of the top 250 movies on IMDB\r\n * @param {object} additionalData The additional data of the movies in the top 250 on IMDB\r\n * @returns {object} The imdb data concatenated with the oscars data\r\n */\r\nexport function addAdditionalMovieData (imdb, additionalData) {\r\n  return imdb.map(movie => {\r\n    const enhancedMovie = { ...movie }\r\n    const cleanName = cleanMovieName(movie.name)\r\n\r\n    enhancedMovie.keywords = additionalData[cleanName] ? additionalData[cleanName].keywords : []\r\n    enhancedMovie.popularity = additionalData[cleanName] ? additionalData[cleanName].popularity : 0\r\n    enhancedMovie.productionCompanies = additionalData[cleanName] ? additionalData[cleanName].productionCompanies : {}\r\n    enhancedMovie.releaseDate = additionalData[cleanName] ? additionalData[cleanName].releaseDate : null\r\n\r\n    if (typeof enhancedMovie.budget === 'string' && additionalData[cleanName]) {\r\n      enhancedMovie.budget = additionalData[cleanName].budget\r\n    }\r\n\r\n    if (typeof enhancedMovie.boxOffice === 'string' && additionalData[cleanName]) {\r\n      enhancedMovie.boxOffice = additionalData[cleanName].revenue\r\n    }\r\n\r\n    return enhancedMovie\r\n  })\r\n}\r\n","/**\r\n * Fix the field values in order to proceed with processing\r\n *\r\n * @param {object[]} data The top 250 movies on IMDB\r\n * @returns {object} The correct value types for all the various fields of the data\r\n */\r\nexport function processMovieData (data) {\r\n  const stringToArray = (movie, fieldName) => {\r\n    if (!movie[fieldName]) return []\r\n\r\n    try {\r\n      if (typeof movie[fieldName] === 'string') {\r\n        return movie[fieldName].split(',').map(item => item.trim())\r\n      }\r\n      return movie[fieldName]\r\n    } catch (error) {\r\n      return []\r\n    }\r\n  }\r\n\r\n  return data.map((movie) => {\r\n    const processedMovie = { ...movie }\r\n    const fieldsToProcess = ['casts', 'directors', 'genre', 'writers']\r\n\r\n    fieldsToProcess.forEach(field => {\r\n      processedMovie[field] = stringToArray(movie, field)\r\n    })\r\n\r\n    return processedMovie\r\n  })\r\n}\r\n","/**\r\n * Helper functions for metrics calculations\r\n */\r\nconst MetricsHelper = {\r\n  standardMetrics: [\r\n    { property: 'rating', movieProperty: 'rating' },\r\n    { property: 'budget', movieProperty: 'budget' },\r\n    { property: 'boxOffice', movieProperty: 'box_office' },\r\n    { property: 'popularity', movieProperty: 'popularity' }\r\n  ],\r\n\r\n  createMetricsObject () {\r\n    const metricsObject = {}\r\n\r\n    this.standardMetrics.forEach(metric => {\r\n      metricsObject[`total${metric.property.charAt(0).toUpperCase() + metric.property.slice(1)}`] = 0\r\n      metricsObject[`${metric.property}Count`] = 0\r\n      metricsObject[`avg${metric.property.charAt(0).toUpperCase() + metric.property.slice(1)}`] = 0\r\n    })\r\n\r\n    return metricsObject\r\n  },\r\n\r\n  addMovieMetrics (currObject, movie) {\r\n    this.standardMetrics.forEach(metric => {\r\n      const value = movie[metric.movieProperty]\r\n      const totalProp = `total${metric.property.charAt(0).toUpperCase() + metric.property.slice(1)}`\r\n      const countProp = `${metric.property}Count`\r\n\r\n      if (typeof value === 'number' && !isNaN(value)) {\r\n        currObject[totalProp] += value\r\n        currObject[countProp]++\r\n      }\r\n    })\r\n\r\n    return currObject\r\n  },\r\n\r\n  calculateAverages (currObject) {\r\n    this.standardMetrics.forEach(metric => {\r\n      const totalProp = `total${metric.property.charAt(0).toUpperCase() + metric.property.slice(1)}`\r\n      const countProp = `${metric.property}Count`\r\n      const avgProp = `avg${metric.property.charAt(0).toUpperCase() + metric.property.slice(1)}`\r\n\r\n      currObject[avgProp] = currObject[countProp] > 0 ? currObject[totalProp] / currObject[countProp] : 0\r\n    })\r\n\r\n    return currObject\r\n  },\r\n\r\n  cleanupMetricsProperties (currObject) {\r\n    this.standardMetrics.forEach(metric => {\r\n      const totalProp = `total${metric.property.charAt(0).toUpperCase() + metric.property.slice(1)}`\r\n      const countProp = `${metric.property}Count`\r\n\r\n      delete currObject[totalProp]\r\n      delete currObject[countProp]\r\n    })\r\n\r\n    return currObject\r\n  },\r\n\r\n  findMostPopularGenre (genres) {\r\n    if (!genres || !genres.length) return null\r\n\r\n    const genreCounts = {}\r\n    genres.forEach(genre => {\r\n      if (genre && genre.trim()) {\r\n        genreCounts[genre.trim()] = (genreCounts[genre.trim()] || 0) + 1\r\n      }\r\n    })\r\n\r\n    let maxCount = 0\r\n    let mostPopularGenre = null\r\n\r\n    Object.entries(genreCounts).forEach(([genre, count]) => {\r\n      if (count > maxCount) {\r\n        maxCount = count\r\n        mostPopularGenre = genre\r\n      }\r\n    })\r\n\r\n    return { mostPopularGenre, genreCounts }\r\n  }\r\n}\r\n\r\n/**\r\n * Gets important movie data associated to each contributor of the top 250 movies on IMDB\r\n * with additional statistics\r\n *\r\n * @param {object[]} movies The data of the movies\r\n * @returns {object} The casts, directors, and writers associated to the top 250 movies on IMDB\r\n */\r\nexport function getFilmContributorsData (movies) {\r\n  const contributors = {\r\n    casts: {},\r\n    directors: {},\r\n    writers: {}\r\n  }\r\n\r\n  const contributorCategories = {\r\n    casts: 'casts',\r\n    directors: 'directors',\r\n    writers: 'writers'\r\n  }\r\n\r\n  const createContributorObject = () => {\r\n    return {\r\n      movies: [],\r\n      nMovies: 0,\r\n      ...MetricsHelper.createMetricsObject()\r\n    }\r\n  }\r\n\r\n  movies.forEach(movie => {\r\n    const movieInfo = {\r\n      name: movie.name,\r\n      genre: movie.genre || []\r\n    }\r\n\r\n    Object.entries(contributorCategories).forEach(([movieProperty, categoryName]) => {\r\n      if (movie[movieProperty]) {\r\n        movie[movieProperty].forEach(person => {\r\n          if (!contributors[categoryName][person]) {\r\n            contributors[categoryName][person] = createContributorObject()\r\n          }\r\n\r\n          contributors[categoryName][person].movies.push({ ...movieInfo })\r\n          contributors[categoryName][person].nMovies = contributors[categoryName][person].movies.length\r\n\r\n          MetricsHelper.addMovieMetrics(contributors[categoryName][person], movie)\r\n        })\r\n      }\r\n    })\r\n  })\r\n\r\n  Object.keys(contributors).forEach(category => {\r\n    Object.keys(contributors[category]).forEach(person => {\r\n      const data = contributors[category][person]\r\n\r\n      MetricsHelper.calculateAverages(data)\r\n      MetricsHelper.cleanupMetricsProperties(data)\r\n    })\r\n  })\r\n\r\n  return contributors\r\n}\r\n\r\nexport function getGenreDataIntervals (movies) {\r\n  const decades = createYearIntervals(movies)\r\n\r\n  decades.forEach(decade => {\r\n    if (!decade.movies.length) {\r\n      decade.mostCommonGenre = null\r\n      decade.genreCounts = {}\r\n      return\r\n    }\r\n\r\n    const allGenres = []\r\n    decade.movies.forEach(movie => {\r\n      if (movie.genre && Array.isArray(movie.genre)) {\r\n        movie.genre.forEach(genre => {\r\n          if (genre && genre.trim()) allGenres.push(genre.trim())\r\n        })\r\n      }\r\n    })\r\n\r\n    const { mostPopularGenre, genreCounts } = MetricsHelper.findMostPopularGenre(allGenres)\r\n    decade.mostCommonGenre = mostPopularGenre\r\n    decade.genreCounts = genreCounts\r\n  })\r\n\r\n  return decades\r\n}\r\n\r\nexport function createYearIntervals (movies) {\r\n  const minYear = movies.reduce((min, movie) => movie.year < min ? movie.year : min, Number.MAX_VALUE)\r\n  const maxYear = movies.reduce((max, movie) => movie.year > max ? movie.year : max, Number.MIN_VALUE)\r\n\r\n  const firstDecade = Math.floor(minYear / 10) * 10\r\n  const lastDecade = Math.floor(maxYear / 10) * 10\r\n\r\n  const intervals = []\r\n  for (let decade = firstDecade; decade <= lastDecade; decade += 10) {\r\n    const decadeYears = decade + 9\r\n    intervals.push({\r\n      startYear: decade,\r\n      endYear: decadeYears,\r\n      label: `${decade}s`,\r\n      movies: [],\r\n      nMovies: 0,\r\n      genreCounts: {},\r\n      ...MetricsHelper.createMetricsObject()\r\n    })\r\n  }\r\n\r\n  movies.forEach(movie => {\r\n    const interval = intervals.find(interval => movie.year >= interval.startYear && movie.year <= interval.endYear)\r\n    if (!interval) return\r\n\r\n    interval.movies.push(movie)\r\n    interval.nMovies++\r\n\r\n    MetricsHelper.addMovieMetrics(interval, movie)\r\n  })\r\n\r\n  intervals.forEach(interval => {\r\n    MetricsHelper.calculateAverages(interval)\r\n    MetricsHelper.cleanupMetricsProperties(interval)\r\n  })\r\n\r\n  return intervals\r\n}\r\n\r\n/**\r\n * Gets the top collaborations for actor/director and actor/actor collaborations\r\n *\r\n * @param {Array} movies Array of movie objects\r\n * @param {number} limit Number of top collaborations to return (default 20)\r\n * @returns {object} Object with the top actor/director and actor/actor collaborations\r\n */\r\nexport function getTopCollaborations (movies, limit = 20) {\r\n  const allCollabs = countCollaborations(movies)\r\n\r\n  return {\r\n    topActorDirectorCollabs: allCollabs.actorDirectorCollabs.slice(0, limit),\r\n    topActorActorCollabs: allCollabs.actorActorCollabs.slice(0, limit)\r\n  }\r\n}\r\n\r\n/**\r\n * Counts the amount of collaborations between actors and directors, and also between actors themselves\r\n *\r\n * @param {Array} movies Array of movie objects with casts and directors properties\r\n * @returns {object} Object containing actorDirectorCollabs and actorActorCollabs\r\n */\r\nfunction countCollaborations (movies) {\r\n  const actorDirectorCollabs = {}\r\n  const actorActorCollabs = {}\r\n\r\n  const createCollabObject = (isSameType, participant1, participant2) => {\r\n    return {\r\n      [isSameType ? 'actor1' : 'actor']: participant1,\r\n      [isSameType ? 'actor2' : 'director']: participant2,\r\n      movies: [],\r\n      genres: [],\r\n      mostPopularGenre: null,\r\n      count: 0,\r\n      ...MetricsHelper.createMetricsObject()\r\n    }\r\n  }\r\n\r\n  const addMovieToCollab = (collab, movie) => {\r\n    if (collab.movies.includes(movie.name)) return\r\n\r\n    collab.count++\r\n    collab.movies.push(movie.name)\r\n\r\n    MetricsHelper.addMovieMetrics(collab, movie)\r\n\r\n    if (movie.genre) {\r\n      const genres = Array.isArray(movie.genre) ? movie.genre : [movie.genre]\r\n      genres.forEach(genre => {\r\n        if (genre && genre.trim()) collab.genres.push(genre.trim())\r\n      })\r\n    }\r\n  }\r\n\r\n  movies.forEach(movie => {\r\n    const castMembers = movie.casts || []\r\n    const directors = movie.directors || []\r\n\r\n    castMembers.forEach(actor => {\r\n      if (!actor) return\r\n\r\n      directors.forEach(director => {\r\n        if (!director) return\r\n\r\n        const key = `${actor}/${director}`\r\n\r\n        if (!actorDirectorCollabs[key]) {\r\n          actorDirectorCollabs[key] = createCollabObject(false, actor, director)\r\n        }\r\n\r\n        addMovieToCollab(actorDirectorCollabs[key], movie)\r\n      })\r\n    })\r\n\r\n    for (let i = 0; i < castMembers.length; i++) {\r\n      const actor1 = castMembers[i]\r\n      if (!actor1) continue\r\n\r\n      for (let j = i + 1; j < castMembers.length; j++) {\r\n        const actor2 = castMembers[j]\r\n        if (!actor2) continue\r\n\r\n        const actorPair = [actor1, actor2].sort()\r\n        const key = `${actorPair[0]}/${actorPair[1]}`\r\n\r\n        if (!actorActorCollabs[key]) {\r\n          actorActorCollabs[key] = createCollabObject(true, actorPair[0], actorPair[1])\r\n        }\r\n\r\n        addMovieToCollab(actorActorCollabs[key], movie)\r\n      }\r\n    }\r\n  })\r\n\r\n  const finalizeCollabs = collabs => {\r\n    return Object.values(collabs).map(collab => {\r\n      MetricsHelper.calculateAverages(collab)\r\n\r\n      if (collab.genres.length) {\r\n        const { mostPopularGenre } = MetricsHelper.findMostPopularGenre(collab.genres)\r\n        collab.mostPopularGenre = mostPopularGenre\r\n      }\r\n\r\n      MetricsHelper.cleanupMetricsProperties(collab)\r\n      delete collab.genres\r\n\r\n      return collab\r\n    }).sort((a, b) => b.count - a.count)\r\n  }\r\n\r\n  return {\r\n    actorDirectorCollabs: finalizeCollabs(actorDirectorCollabs),\r\n    actorActorCollabs: finalizeCollabs(actorActorCollabs)\r\n  }\r\n}\r\n\r\nexport function getCertificateData (movies) {\r\n  const createCertificateObject = () => {\r\n    return {\r\n      movies: [],\r\n      count: 0,\r\n      genres: [],\r\n      mostPopularGenre: null,\r\n      ...MetricsHelper.createMetricsObject()\r\n    }\r\n  }\r\n\r\n  const certificateData = movies.reduce((certificateList, movie) => {\r\n    const certificate = typeof movie.certificate === 'string' ? movie.certificate.toLowerCase() : 'unknown'\r\n\r\n    if (!certificateList[certificate]) certificateList[certificate] = createCertificateObject()\r\n\r\n    certificateList[certificate].movies.push({ name: movie.name })\r\n    certificateList[certificate].count++\r\n\r\n    MetricsHelper.addMovieMetrics(certificateList[certificate], movie)\r\n\r\n    if (movie.genre) {\r\n      const genres = Array.isArray(movie.genre) ? movie.genre : [movie.genre]\r\n      genres.forEach(genre => {\r\n        if (genre && genre.trim()) certificateList[certificate].genres.push(genre.trim())\r\n      })\r\n    }\r\n\r\n    return certificateList\r\n  }, {})\r\n\r\n  Object.keys(certificateData).forEach(certificate => {\r\n    const data = certificateData[certificate]\r\n    MetricsHelper.calculateAverages(data)\r\n\r\n    if (data.genres.length) {\r\n      const { mostPopularGenre, genreCounts } = MetricsHelper.findMostPopularGenre(data.genres)\r\n      data.mostPopularGenre = mostPopularGenre\r\n      data.genreCounts = genreCounts\r\n    }\r\n\r\n    MetricsHelper.cleanupMetricsProperties(data)\r\n    delete data.genres\r\n  })\r\n\r\n  return certificateData\r\n}\r\n\r\nexport function getDataBySeason (movies) {\r\n  const createSeasonObject = (beginDate, endDate) => ({\r\n    beginDate,\r\n    endDate,\r\n    movies: [],\r\n    count: 0,\r\n    genres: [],\r\n    mostPopularGenre: null,\r\n    ...MetricsHelper.createMetricsObject()\r\n  })\r\n\r\n  const seasons = {\r\n    spring: createSeasonObject('03-20', '06-20'),\r\n    summer: createSeasonObject('06-21', '09-22'),\r\n    fall: createSeasonObject('09-23', '12-20'),\r\n    winter: createSeasonObject('12-21', '03-19')\r\n  }\r\n\r\n  const getSeason = (dateString) => {\r\n    if (!dateString || typeof dateString !== 'string') return null\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    const [year, month, day] = dateString.split('-').map(num => parseInt(num, 10))\r\n    const monthDay = `${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`\r\n\r\n    if (monthDay >= '03-20' && monthDay <= '06-20') return 'spring'\r\n    else if (monthDay >= '06-21' && monthDay <= '09-22') return 'summer'\r\n    else if (monthDay >= '09-23' && monthDay <= '12-20') return 'fall'\r\n    else return 'winter'\r\n  }\r\n\r\n  movies.forEach(movie => {\r\n    const season = getSeason(movie.releaseDate)\r\n    if (season === null) return\r\n\r\n    seasons[season].movies.push(movie)\r\n    seasons[season].count++\r\n\r\n    MetricsHelper.addMovieMetrics(seasons[season], movie)\r\n\r\n    if (movie.genre) {\r\n      const genres = Array.isArray(movie.genre) ? movie.genre : [movie.genre]\r\n      genres.forEach(genre => {\r\n        if (genre && genre.trim()) seasons[season].genres.push(genre.trim())\r\n      })\r\n    }\r\n  })\r\n\r\n  Object.keys(seasons).forEach(season => {\r\n    const data = seasons[season]\r\n    MetricsHelper.calculateAverages(data)\r\n\r\n    if (data.genres.length) {\r\n      const { mostPopularGenre, genreCounts } = MetricsHelper.findMostPopularGenre(data.genres)\r\n      data.mostPopularGenre = mostPopularGenre\r\n      data.genreCounts = genreCounts\r\n    }\r\n\r\n    MetricsHelper.cleanupMetricsProperties(data)\r\n    delete data.genres\r\n  })\r\n\r\n  return seasons\r\n}\r\n\r\nexport function getMovieLengthData (movies) {\r\n  let minRuntime = Number.MAX_VALUE\r\n  let maxRuntime = 0\r\n\r\n  movies.forEach(movie => {\r\n    const runtime = parseRuntime(movie.run_time)\r\n    if (runtime) {\r\n      minRuntime = Math.min(minRuntime, runtime)\r\n      maxRuntime = Math.max(maxRuntime, runtime)\r\n    }\r\n  })\r\n\r\n  const firstInterval = Math.floor(minRuntime / 10) * 10\r\n  const lastInterval = Math.floor(maxRuntime / 10) * 10\r\n\r\n  console.log(minRuntime)\r\n  console.log(maxRuntime)\r\n\r\n  const intervals = []\r\n  for (let minutes = firstInterval; minutes <= lastInterval; minutes += 10) {\r\n    intervals.push({\r\n      startMinutes: minutes,\r\n      endMinutes: minutes + 9,\r\n      label: `${minutes}s`,\r\n      movies: [],\r\n      nMovies: 0,\r\n      genres: [],\r\n      ...MetricsHelper.createMetricsObject()\r\n    })\r\n  }\r\n\r\n  movies.forEach(movie => {\r\n    const movieRuntime = parseRuntime(movie.run_time)\r\n    const interval = intervals.find(interval => movieRuntime >= interval.startMinutes && movieRuntime <= interval.endMinutes)\r\n    if (!interval) return\r\n\r\n    interval.movies.push(movie)\r\n    interval.nMovies++\r\n\r\n    MetricsHelper.addMovieMetrics(interval, movie)\r\n\r\n    if (movie.genre) {\r\n      const genres = Array.isArray(movie.genre) ? movie.genre : [movie.genre]\r\n      genres.forEach(genre => {\r\n        if (genre && genre.trim()) interval.genres.push(genre.trim())\r\n      })\r\n    }\r\n  })\r\n\r\n  intervals.forEach(interval => {\r\n    MetricsHelper.calculateAverages(interval)\r\n\r\n    if (interval.genres.length) {\r\n      const { mostPopularGenre, genreCounts } = MetricsHelper.findMostPopularGenre(interval.genres)\r\n      interval.mostPopularGenre = mostPopularGenre\r\n      interval.genreCounts = genreCounts\r\n    }\r\n\r\n    MetricsHelper.cleanupMetricsProperties(interval)\r\n    delete interval.genres\r\n  })\r\n\r\n  return intervals\r\n}\r\n\r\nfunction parseRuntime (runtimeString) {\r\n  if (!runtimeString || typeof runtimeString !== 'string') return null\r\n  let totalMins = 0\r\n\r\n  const hoursMatch = runtimeString.match(/(\\d+)h/)\r\n  const minutesMatch = runtimeString.match(/(\\d+)m/)\r\n\r\n  if (hoursMatch && hoursMatch[1]) totalMins += parseInt(hoursMatch[1], 10) * 60\r\n  if (minutesMatch && minutesMatch[1]) totalMins += parseInt(minutesMatch[1], 10)\r\n\r\n  return totalMins > 0 ? totalMins : null\r\n}\r\n","// 'use strict'\n\nimport { addGoldenGlobesData, getGoldenGlobesMovieData } from './scripts/process_golden_globes'\nimport { addOscarsData, getOscarsMovieData } from './scripts/process_oscars'\nimport { addAdditionalMovieData, getAdditionalMovieData } from './scripts/process_additional_movie_data'\nimport { processMovieData } from './scripts/process_imdb'\nimport {\n  getFilmContributorsData, getGenreDataIntervals,\n  getTopCollaborations, getCertificateData, getDataBySeason, getMovieLengthData\n} from './scripts/preprocess_data'\n\n// import * as helper from './scripts/helper.js'\n// import * as preproc from './scripts/preprocess_imbd_data.js'\n// import * as viz from './scripts/viz.js'\n// import * as legend from './scripts/legend.js'\n// import * as hover from './scripts/hover.js'\n// import * as util from './scripts/util.js'\n\n// import * as d3Chromatic from 'd3-scale-chromatic'\n\n/**\n * @file This file is the entry-point for the the code for TP3 for the course INF8808.\n * @author Olivia Gélinas\n * @version v1.0.0\n */\n\n(function (d3) {\n  // let bounds\n  // let svgSize\n  // let graphSize\n\n  // const margin = { top: 35, right: 200, bottom: 35, left: 200 }\n\n  // const xScale = d3.scaleBand().padding(0.05)\n  // const yScale = d3.scaleBand().padding(0.2)\n  // const colorScale = d3.scaleSequential(d3Chromatic.interpolateYlGnBu)\n\n  Promise.all([\n    d3.csv('./golden_globe_awards.csv', d3.autoType),\n    d3.csv('./IMDB_Top_250_Movies.csv', d3.autoType),\n    d3.csv('./movie_dataset.csv', d3.autoType),\n    d3.csv('./the_oscar_award.csv', d3.autoType)\n  ]).then(function ([goldenGlobes, imdb, movies, oscars]) {\n    imdb = processMovieData(imdb)\n\n    const movieNames = imdb.reduce((acc, movie) => {\n      if (!movie.name) return acc\n\n      const nameStr = String(movie.name)\n      const cleanName = nameStr.toLowerCase().replace(/[^a-z0-9\\s]/g, '')\n\n      if (!acc.includes(cleanName) && cleanName.trim() !== '') acc.push(cleanName)\n      return acc\n    }, [])\n\n    const oscarMovies = getOscarsMovieData(oscars, movieNames)\n    imdb = addOscarsData(imdb, oscarMovies)\n\n    const goldenGlobesMovies = getGoldenGlobesMovieData(goldenGlobes, movieNames)\n    imdb = addGoldenGlobesData(imdb, goldenGlobesMovies)\n\n    const additionalMovieData = getAdditionalMovieData(movies, movieNames)\n    imdb = addAdditionalMovieData(imdb, additionalMovieData)\n\n    const contributorData = getFilmContributorsData(imdb)\n    const genreData = getGenreDataIntervals(imdb)\n\n    const collaborationsData = getTopCollaborations(imdb)\n\n    const certificateData = getCertificateData(imdb)\n    const seasonalData = getDataBySeason(imdb)\n\n    const movieLengthData = getMovieLengthData(imdb)\n    console.log(imdb)\n    console.log(movieLengthData)\n\n    // const seasonalReleaseData = getDataBySeason(imdb)\n\n    // }, [])\n    // d3.csv('./golden_globe_awards.csv', d3.autoType).then(function (data) {\n    //   console.log(data)\n    //   const neighborhoodNames = preproc.getNeighborhoodNames(data)\n    //   data = preproc.filterYears(data, 2010, 2020)\n\n    //   data = preproc.summarizeYearlyCounts(data)\n    //   data = preproc.fillMissingData(data, neighborhoodNames, 2010, 2020, util.range)\n\n    // viz.setColorScaleDomain(colorScale, data)\n\n    // legend.initGradient(colorScale)\n    // legend.initLegendBar()\n    // legend.initLegendAxis()\n\n    // const g = helper.generateG(margin)\n\n    // helper.appendAxes(g)\n    // viz.appendRects(data)\n\n    // setSizing()\n    // build()\n\n    /**\n     *   This function handles the graph's sizing.\n     */\n    // function setSizing () {\n    //   bounds = d3.select('.graph').node().getBoundingClientRect()\n\n    //   svgSize = {\n    //     width: bounds.width,\n    //     height: 550\n    //   }\n\n    //   graphSize = {\n    //     width: svgSize.width - margin.right - margin.left,\n    //     height: svgSize.height - margin.bottom - margin.top\n    //   }\n\n    //   helper.setCanvasSize(svgSize.width, svgSize.height)\n    // }\n\n    /**\n     *   This function builds the graph.\n     */\n    // function build () {\n    //   viz.updateXScale(xScale, data, graphSize.width, util.range)\n    //   viz.updateYScale(yScale, neighborhoodNames, graphSize.height)\n\n    //   viz.drawXAxis(xScale)\n    //   viz.drawYAxis(yScale, graphSize.width)\n\n    //   viz.rotateYTicks()\n\n    //   viz.updateRects(xScale, yScale, colorScale)\n\n    //   hover.setRectHandler(xScale, yScale, hover.rectSelected, hover.rectUnselected, hover.selectTicks, hover.unselectTicks)\n\n    //   legend.draw(margin.left / 2, margin.top + 5, graphSize.height - 10, 15, 'url(#gradient)', colorScale)\n    // }\n\n    // window.addEventListener('resize', () => {\n    //   setSizing()\n    //   build()\n    // })\n  })\n})(d3)\n"]}