{"version":3,"sources":["scripts/helper.js","scripts/process_golden_globes.js","scripts/process_oscars.js","scripts/process_additional_movie_data.js","scripts/process_imdb.js","scripts/preprocess_data.js","index.js","../node_modules/parcel-bundler/src/builtins/hmr-runtime.js"],"names":["cleanMovieName","name","nameStr","String","articlePattern","articleMatch","match","concat","toLowerCase","replace","adjustToInflation","movie","parseRuntime","runtimeString","totalMins","hoursMatch","minutesMatch","parseInt","stopWords","exports","Set","_helper","require","_typeof","o","Symbol","iterator","constructor","prototype","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","value","configurable","writable","i","_toPrimitive","toPrimitive","call","TypeError","Number","getGoldenGlobesMovieData","goldenGlobes","movieNames","reduce","acc","item","cleanName","film","includes","isWinner","win","nominations","year","year_film","nominee","winner","nbNominations","nbWins","addGoldenGlobesData","imdb","goldenGlobesMovies","map","enhancedMovie","goldenGlobesData","goldenGlobesNominees","goldenGlobesNominations","goldenGlobesWins","getOscarsMovieData","oscars","addOscarsData","oscarMovies","oscarsData","oscarNominees","oscarNominations","oscarWins","getAdditionalMovieData","movies","original_title","companies","production_companies","pCompaniesData","JSON","parse","Array","isArray","pCompany","Boolean","releaseDate","release_date","Date","toISOString","split","error","keywords","popularity","productionCompanies","budget","revenue","addAdditionalMovieData","additionalData","boxOffice","processMovieData","data","stringToArray","fieldName","trim","processedMovie","fieldsToProcess","field","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","a","_arrayLikeToArray","toString","slice","from","test","n","l","u","f","next","done","return","MetricsHelper","standardMetrics","property","movieProperty","createMetricsObject","metricsObject","metric","charAt","toUpperCase","addMovieMetrics","currObject","totalProp","countProp","isNaN","calculateAverages","avgProp","cleanupMetricsProperties","findMostPopularGenre","genres","genreCounts","genre","maxCount","mostPopularGenre","entries","_ref","_ref2","count","getFilmContributorsData","contributors","casts","directors","writers","contributorCategories","createContributorObject","nMovies","movieInfo","_ref3","_ref4","categoryName","person","category","getGenreDataIntervals","decades","createYearIntervals","decade","mostCommonGenre","allGenres","_MetricsHelper$findMo","intervalSize","undefined","minYear","min","MAX_VALUE","maxYear","max","MIN_VALUE","firstDecade","Math","floor","lastDecade","intervals","decadeYears","startYear","endYear","label","interval","find","getTopCollaborations","limit","allCollabs","countCollaborations","topActorDirectorCollabs","actorDirectorCollabs","topActorActorCollabs","actorActorCollabs","createCollabObject","isSameType","participant1","participant2","addMovieToCollab","collab","castMembers","actor","director","key","actor1","j","actor2","actorPair","sort","finalizeCollabs","collabs","values","_MetricsHelper$findMo2","b","getCertificateData","createCertificateObject","certificateData","certificateList","certificate","_MetricsHelper$findMo3","getDataBySeason","createSeasonObject","beginDate","endDate","seasons","spring","summer","fall","winter","getSeason","dateString","_dateString$split$map","num","_dateString$split$map2","month","day","monthDay","padStart","season","_MetricsHelper$findMo4","getMovieLengthData","minRuntime","maxRuntime","runtime","run_time","firstInterval","lastInterval","minutes","startMinutes","endMinutes","movieRuntime","_MetricsHelper$findMo5","getTaglineWordsData","minWordLength","minOccurrences","createWordObject","wordCounts","tagline","words","word","has","significantWords","wordData","movieWords","_MetricsHelper$findMo6","result","_ref5","_ref6","getTaglineLengthData","lengthMap","createLengthObject","wordCount","_ref7","_ref8","avgWordCount","_process_golden_globes","_process_oscars","_process_additional_movie_data","_process_imdb","_preprocess_data","d3","Promise","all","csv","autoType","then","additionalMovieData","contributorData","genreData","collaborationsData","seasonalData","movieLengthData","taglineWordData","taglineLengthData","console","log","OVERLAY_ID","OldModule","module","bundle","Module","moduleName","hot","hotData","_acceptCallbacks","_disposeCallbacks","accept","fn","dispose","checkedAssets","assetsToAccept","parent","isParcelRequire","WebSocket","hostname","location","protocol","ws","onmessage","event","type","handled","assets","asset","isNew","didAccept","hmrAcceptCheck","global","parcelRequire","id","every","generated","js","clear","hmrApply","v","hmrAcceptRun","reload","close","onclose","removeErrorOverlay","message","stack","overlay","createErrorOverlay","document","body","appendChild","getElementById","remove","createElement","stackTrace","innerText","innerHTML","getParents","modules","parents","k","d","dep","Function","deps","cached","cache","some","cb"],"mappings":"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","file":"src.e31bb0bc.js","sourceRoot":"..\\src","sourcesContent":["\n// /**\n//  * Generates the SVG element g which will contain the data visualisation.\n//  *\n//  * @param {object} margin The desired margins around the graph\n//  * @returns {*} The d3 Selection for the created g element\n//  */\n// export function generateG (margin) {\n//   return d3.select('.graph')\n//     .select('svg')\n//     .append('g')\n//     .attr('id', 'graph-g')\n//     .attr('transform',\n//       'translate(' + margin.left + ',' + margin.top + ')')\n// }\n\n// /**\n//  * Sets the size of the SVG canvas containing the graph.\n//  *\n//  * @param {number} width The desired width\n//  * @param {number} height The desired height\n//  */\n// export function setCanvasSize (width, height) {\n//   d3.select('#heatmap').select('svg')\n//     .attr('width', width)\n//     .attr('height', height)\n// }\n\n// /**\n//  * Appends an SVG g element which will contain the axes.\n//  *\n//  * @param {*} g The d3 Selection of the graph's g SVG element\n//  */\n// export function appendAxes (g) {\n//   g.append('g')\n//     .attr('class', 'x axis')\n\n//   g.append('g')\n//     .attr('class', 'y axis')\n// }\n\n/**\n * Cleans the name to avoid mismatching during the comparison of movie names\n *\n * @param {string} name The movie name to clean\n * @returns {string} the cleaned movie name\n */\nexport function cleanMovieName (name) {\n  let nameStr = String(name)\n  const articlePattern = /^(.+),\\s+(The|A|An)$/i\n  const articleMatch = nameStr.match(articlePattern)\n\n  if (articleMatch) nameStr = `${articleMatch[2]} ${articleMatch[1]}`\n  return nameStr.toLowerCase().replace(/[^a-z0-9\\s]/g, '')\n}\n\nexport function adjustToInflation (movie) {\n  ///\n}\n\nexport function parseRuntime (runtimeString) {\n  if (!runtimeString || typeof runtimeString !== 'string') return null\n  let totalMins = 0\n\n  const hoursMatch = runtimeString.match(/(\\d+)h/)\n  const minutesMatch = runtimeString.match(/(\\d+)m/)\n\n  if (hoursMatch && hoursMatch[1]) totalMins += parseInt(hoursMatch[1], 10) * 60\n  if (minutesMatch && minutesMatch[1]) totalMins += parseInt(minutesMatch[1], 10)\n\n  return totalMins > 0 ? totalMins : null\n}\n\nexport const stopWords = new Set([\n  'about', 'after', 'again', 'against', 'all', 'also', 'and', 'any', 'are', 'because',\n  'been', 'before', 'being', 'between', 'both', 'but', 'can', 'cant', 'could', 'did', 'does',\n  'doing', 'dont', 'down', 'during', 'each', 'few', 'for', 'from', 'further', 'had', 'has',\n  'have', 'having', 'his', 'here', 'how', 'into', 'its', 'just', 'more', 'most', 'not', 'now', 'off',\n  'once', 'only', 'other', 'over', 'same', 'should', 'some', 'such', 'than', 'that',\n  'the', 'their', 'them', 'then', 'there', 'theres', 'these', 'they', 'this', 'those', 'through',\n  'too', 'under', 'until', 'very', 'was', 'were', 'what', 'when', 'where', 'which',\n  'while', 'who', 'whom', 'why', 'will', 'with', 'would', 'your'\n])\n","import { cleanMovieName } from './helper'\r\n\r\n/**\r\n * Gets the data for golden globes nominations for all the movies in the top 250 in IMDB\r\n *\r\n * @param {object[]} goldenGlobes The golden globes data to analyze\r\n * @param {object[]} movieNames The names of the top 250 movies on IMDB\r\n * @returns {object} The golden globes data of the top 250 movies on IMDB\r\n */\r\nexport function getGoldenGlobesMovieData (goldenGlobes, movieNames) {\r\n  return goldenGlobes.reduce((acc, item) => {\r\n    const cleanName = cleanMovieName(item.film)\r\n\r\n    if (movieNames.includes(cleanName)) {\r\n      const isWinner = item.win === 'True'\r\n      if (!acc[cleanName]) {\r\n        acc[cleanName] = {\r\n          nominations: [{ year: item.year_film, nominee: item.name, winner: isWinner }],\r\n          nbNominations: 1,\r\n          nbWins: isWinner ? 1 : 0\r\n        }\r\n      } else {\r\n        acc[cleanName].nominations.push({\r\n          year: item.year_film,\r\n          nominee: item.name,\r\n          winner: isWinner\r\n        })\r\n\r\n        acc[cleanName].nbNominations++\r\n        if (isWinner) acc[cleanName].nbWins++\r\n      }\r\n    }\r\n\r\n    return acc\r\n  }, {})\r\n}\r\n\r\n/**\r\n * Add the data collected from the golden globes awards to the imdb data\r\n *\r\n * @param {object[]} imdb The data of the top 250 movies on IMDB\r\n * @param {object} goldenGlobesMovies The golden globes data of the movies in the top 250 on IMDB\r\n * @returns {object} The imdb data concatenated with the golden globes data\r\n */\r\nexport function addGoldenGlobesData (imdb, goldenGlobesMovies) {\r\n  return imdb.map(movie => {\r\n    const enhancedMovie = { ...movie }\r\n    const cleanName = cleanMovieName(movie.name)\r\n\r\n    enhancedMovie.goldenGlobesData = {\r\n      goldenGlobesNominees: goldenGlobesMovies[cleanName] ? goldenGlobesMovies[cleanName].nominations : [],\r\n      goldenGlobesNominations: goldenGlobesMovies[cleanName] ? goldenGlobesMovies[cleanName].nbNominations : 0,\r\n      goldenGlobesWins: goldenGlobesMovies[cleanName] ? goldenGlobesMovies[cleanName].nbWins : 0\r\n    }\r\n\r\n    return enhancedMovie\r\n  })\r\n}\r\n","import { cleanMovieName } from './helper'\n\n/**\n * Gets the data for oscar nominations for all the movies in the top 250 in IMDB\n *\n * @param {object[]} oscars The oscars data to analyze\n * @param {string[]} movieNames The names of the top 250 movies on IMDB\n * @returns {object} The oscars data of the top 250 movies on IMDB\n */\nexport function getOscarsMovieData (oscars, movieNames) {\n  return oscars.reduce((acc, item) => {\n    const cleanName = cleanMovieName(item.film)\n\n    if (movieNames.includes(cleanName)) {\n      const isWinner = item.winner === 'True'\n      if (!acc[cleanName]) {\n        acc[cleanName] = {\n          nominations: [{ year: item.year_film, nominee: item.name, winner: isWinner }],\n          nbNominations: 1,\n          nbWins: isWinner ? 1 : 0\n        }\n      } else {\n        acc[cleanName].nominations.push({\n          year: item.year_film,\n          nominee: item.name,\n          winner: isWinner\n        })\n\n        acc[cleanName].nbNominations++\n        if (isWinner) acc[cleanName].nbWins++\n      }\n    }\n\n    return acc\n  }, {})\n}\n\n/**\n * Add the data collected from the oscars awards to the imdb data\n *\n * @param {object[]} imdb The data of the top 250 movies on IMDB\n * @param {object} oscarMovies The oscars data of the movies in the top 250 on IMDB\n * @returns {object} The imdb data concatenated with the oscars data\n */\nexport function addOscarsData (imdb, oscarMovies) {\n  return imdb.map(movie => {\n    const enhancedMovie = { ...movie }\n    const cleanName = cleanMovieName(movie.name)\n\n    enhancedMovie.oscarsData = {\n      oscarNominees: oscarMovies[cleanName] ? oscarMovies[cleanName].nominations : [],\n      oscarNominations: oscarMovies[cleanName] ? oscarMovies[cleanName].nbNominations : 0,\n      oscarWins: oscarMovies[cleanName] ? oscarMovies[cleanName].nbWins : 0\n    }\n\n    return enhancedMovie\n  })\n}\n","import { cleanMovieName } from './helper'\r\n\r\n/**\r\n * Gets the additional data required for all the movies in the top 250 in IMDB\r\n *\r\n * @param {object[]} movies The additional movie data to analyze\r\n * @param {object[]} movieNames The names of the top 250 movies on IMDB\r\n * @returns {object} The additonal movie data of the top 250 movies on IMDB\r\n */\r\nexport function getAdditionalMovieData (movies, movieNames) {\r\n  return movies.reduce((acc, movie) => {\r\n    if (!movie.original_title) return acc\r\n\r\n    const cleanName = cleanMovieName(movie.original_title)\r\n\r\n    if (movieNames.includes(cleanName)) {\r\n      let companies = []\r\n      if (movie.production_companies) {\r\n        const pCompaniesData = typeof movie.production_companies === 'string'\r\n          ? JSON.parse(movie.production_companies) : movie.production_companies\r\n\r\n        if (Array.isArray(pCompaniesData) && pCompaniesData.length > 0) {\r\n          companies = pCompaniesData.map(pCompany => pCompany.name).filter(Boolean)\r\n        }\r\n      }\r\n\r\n      let releaseDate = ''\r\n      if (movie.release_date) {\r\n        try {\r\n          releaseDate = new Date(movie.release_date).toISOString().split('T')[0]\r\n        } catch (error) {\r\n          releaseDate = movie.release_date\r\n        }\r\n      }\r\n\r\n      acc[cleanName] = {\r\n        keywords: movie.keywords || '',\r\n        popularity: movie.popularity || 0,\r\n        productionCompanies: companies,\r\n        releaseDate: releaseDate,\r\n        budget: movie.budget,\r\n        revenue: movie.revenue\r\n      }\r\n    }\r\n    return acc\r\n  }, {})\r\n}\r\n\r\n/**\r\n * Add the additional movie data to the imdb data\r\n *\r\n * @param {object[]} imdb The data of the top 250 movies on IMDB\r\n * @param {object} additionalData The additional data of the movies in the top 250 on IMDB\r\n * @returns {object} The imdb data concatenated with the oscars data\r\n */\r\nexport function addAdditionalMovieData (imdb, additionalData) {\r\n  return imdb.map(movie => {\r\n    const enhancedMovie = { ...movie }\r\n    const cleanName = cleanMovieName(movie.name)\r\n\r\n    enhancedMovie.keywords = additionalData[cleanName] ? additionalData[cleanName].keywords : []\r\n    enhancedMovie.popularity = additionalData[cleanName] ? additionalData[cleanName].popularity : 0\r\n    enhancedMovie.productionCompanies = additionalData[cleanName] ? additionalData[cleanName].productionCompanies : {}\r\n    enhancedMovie.releaseDate = additionalData[cleanName] ? additionalData[cleanName].releaseDate : null\r\n\r\n    if (typeof enhancedMovie.budget === 'string' && additionalData[cleanName]) {\r\n      enhancedMovie.budget = additionalData[cleanName].budget\r\n    }\r\n\r\n    if (typeof enhancedMovie.boxOffice === 'string' && additionalData[cleanName]) {\r\n      enhancedMovie.boxOffice = additionalData[cleanName].revenue\r\n    }\r\n\r\n    return enhancedMovie\r\n  })\r\n}\r\n","/**\r\n * Fix the field values in order to proceed with processing\r\n *\r\n * @param {object[]} data The top 250 movies on IMDB\r\n * @returns {object} The correct value types for all the various fields of the data\r\n */\r\nexport function processMovieData (data) {\r\n  const stringToArray = (movie, fieldName) => {\r\n    if (!movie[fieldName]) return []\r\n\r\n    try {\r\n      if (typeof movie[fieldName] === 'string') {\r\n        return movie[fieldName].split(',').map(item => item.trim())\r\n      }\r\n      return movie[fieldName]\r\n    } catch (error) {\r\n      return []\r\n    }\r\n  }\r\n\r\n  return data.map((movie) => {\r\n    const processedMovie = { ...movie }\r\n    const fieldsToProcess = ['casts', 'directors', 'genre', 'writers']\r\n\r\n    fieldsToProcess.forEach(field => {\r\n      processedMovie[field] = stringToArray(movie, field)\r\n    })\r\n\r\n    return processedMovie\r\n  })\r\n}\r\n","import { stopWords, parseRuntime } from './helper'\r\n\r\n/**\r\n * Helper functions for metrics calculations\r\n */\r\nconst MetricsHelper = {\r\n  standardMetrics: [\r\n    { property: 'rating', movieProperty: 'rating' },\r\n    { property: 'budget', movieProperty: 'budget' },\r\n    { property: 'boxOffice', movieProperty: 'box_office' },\r\n    { property: 'popularity', movieProperty: 'popularity' }\r\n  ],\r\n\r\n  createMetricsObject () {\r\n    const metricsObject = {}\r\n\r\n    this.standardMetrics.forEach(metric => {\r\n      metricsObject[`total${metric.property.charAt(0).toUpperCase() + metric.property.slice(1)}`] = 0\r\n      metricsObject[`${metric.property}Count`] = 0\r\n      metricsObject[`avg${metric.property.charAt(0).toUpperCase() + metric.property.slice(1)}`] = 0\r\n    })\r\n\r\n    return metricsObject\r\n  },\r\n\r\n  addMovieMetrics (currObject, movie) {\r\n    this.standardMetrics.forEach(metric => {\r\n      const value = movie[metric.movieProperty]\r\n      const totalProp = `total${metric.property.charAt(0).toUpperCase() + metric.property.slice(1)}`\r\n      const countProp = `${metric.property}Count`\r\n\r\n      if (typeof value === 'number' && !isNaN(value)) {\r\n        currObject[totalProp] += value\r\n        currObject[countProp]++\r\n      }\r\n    })\r\n\r\n    return currObject\r\n  },\r\n\r\n  calculateAverages (currObject) {\r\n    this.standardMetrics.forEach(metric => {\r\n      const totalProp = `total${metric.property.charAt(0).toUpperCase() + metric.property.slice(1)}`\r\n      const countProp = `${metric.property}Count`\r\n      const avgProp = `avg${metric.property.charAt(0).toUpperCase() + metric.property.slice(1)}`\r\n\r\n      currObject[avgProp] = currObject[countProp] > 0 ? currObject[totalProp] / currObject[countProp] : 0\r\n    })\r\n\r\n    return currObject\r\n  },\r\n\r\n  cleanupMetricsProperties (currObject) {\r\n    this.standardMetrics.forEach(metric => {\r\n      const totalProp = `total${metric.property.charAt(0).toUpperCase() + metric.property.slice(1)}`\r\n      const countProp = `${metric.property}Count`\r\n\r\n      delete currObject[totalProp]\r\n      delete currObject[countProp]\r\n    })\r\n\r\n    return currObject\r\n  },\r\n\r\n  findMostPopularGenre (genres) {\r\n    if (!genres || !genres.length) return null\r\n\r\n    const genreCounts = {}\r\n    genres.forEach(genre => {\r\n      if (genre && genre.trim()) {\r\n        genreCounts[genre.trim()] = (genreCounts[genre.trim()] || 0) + 1\r\n      }\r\n    })\r\n\r\n    let maxCount = 0\r\n    let mostPopularGenre = null\r\n\r\n    Object.entries(genreCounts).forEach(([genre, count]) => {\r\n      if (count > maxCount) {\r\n        maxCount = count\r\n        mostPopularGenre = genre\r\n      }\r\n    })\r\n\r\n    return { mostPopularGenre, genreCounts }\r\n  }\r\n}\r\n\r\n/**\r\n * Gets important movie data associated to each contributor of the top 250 movies on IMDB\r\n * with additional statistics\r\n *\r\n * @param {object[]} movies The data of the movies\r\n * @returns {object} The casts, directors, and writers associated to the top 250 movies on IMDB\r\n */\r\nexport function getFilmContributorsData (movies) {\r\n  const contributors = {\r\n    casts: {},\r\n    directors: {},\r\n    writers: {}\r\n  }\r\n\r\n  const contributorCategories = {\r\n    casts: 'casts',\r\n    directors: 'directors',\r\n    writers: 'writers'\r\n  }\r\n\r\n  const createContributorObject = () => {\r\n    return {\r\n      movies: [],\r\n      nMovies: 0,\r\n      ...MetricsHelper.createMetricsObject()\r\n    }\r\n  }\r\n\r\n  movies.forEach(movie => {\r\n    const movieInfo = {\r\n      name: movie.name,\r\n      genre: movie.genre || []\r\n    }\r\n\r\n    Object.entries(contributorCategories).forEach(([movieProperty, categoryName]) => {\r\n      if (movie[movieProperty]) {\r\n        movie[movieProperty].forEach(person => {\r\n          if (!contributors[categoryName][person]) {\r\n            contributors[categoryName][person] = createContributorObject()\r\n          }\r\n\r\n          contributors[categoryName][person].movies.push({ ...movieInfo })\r\n          contributors[categoryName][person].nMovies = contributors[categoryName][person].movies.length\r\n\r\n          MetricsHelper.addMovieMetrics(contributors[categoryName][person], movie)\r\n        })\r\n      }\r\n    })\r\n  })\r\n\r\n  Object.keys(contributors).forEach(category => {\r\n    Object.keys(contributors[category]).forEach(person => {\r\n      const data = contributors[category][person]\r\n\r\n      MetricsHelper.calculateAverages(data)\r\n      MetricsHelper.cleanupMetricsProperties(data)\r\n    })\r\n  })\r\n\r\n  return contributors\r\n}\r\n\r\nexport function getGenreDataIntervals (movies) {\r\n  const decades = createYearIntervals(movies)\r\n\r\n  decades.forEach(decade => {\r\n    if (!decade.movies.length) {\r\n      decade.mostCommonGenre = null\r\n      decade.genreCounts = {}\r\n      return\r\n    }\r\n\r\n    const allGenres = []\r\n    decade.movies.forEach(movie => {\r\n      if (movie.genre && Array.isArray(movie.genre)) {\r\n        movie.genre.forEach(genre => {\r\n          if (genre && genre.trim()) allGenres.push(genre.trim())\r\n        })\r\n      }\r\n    })\r\n\r\n    const { mostPopularGenre, genreCounts } = MetricsHelper.findMostPopularGenre(allGenres)\r\n    decade.mostCommonGenre = mostPopularGenre\r\n    decade.genreCounts = genreCounts\r\n  })\r\n\r\n  return decades\r\n}\r\n\r\nexport function createYearIntervals (movies, intervalSize = 10) {\r\n  const minYear = movies.reduce((min, movie) => movie.year < min ? movie.year : min, Number.MAX_VALUE)\r\n  const maxYear = movies.reduce((max, movie) => movie.year > max ? movie.year : max, Number.MIN_VALUE)\r\n\r\n  const firstDecade = Math.floor(minYear / intervalSize) * intervalSize\r\n  const lastDecade = Math.floor(maxYear / intervalSize) * intervalSize\r\n\r\n  const intervals = []\r\n  for (let decade = firstDecade; decade <= lastDecade; decade += intervalSize) {\r\n    const decadeYears = decade + (intervalSize - 1)\r\n    intervals.push({\r\n      startYear: decade,\r\n      endYear: decadeYears,\r\n      label: `${decade}s`,\r\n      movies: [],\r\n      nMovies: 0,\r\n      genreCounts: {},\r\n      ...MetricsHelper.createMetricsObject()\r\n    })\r\n  }\r\n\r\n  movies.forEach(movie => {\r\n    const interval = intervals.find(interval => movie.year >= interval.startYear && movie.year <= interval.endYear)\r\n    if (!interval) return\r\n\r\n    interval.movies.push(movie)\r\n    interval.nMovies++\r\n\r\n    MetricsHelper.addMovieMetrics(interval, movie)\r\n  })\r\n\r\n  intervals.forEach(interval => {\r\n    MetricsHelper.calculateAverages(interval)\r\n    MetricsHelper.cleanupMetricsProperties(interval)\r\n  })\r\n\r\n  return intervals\r\n}\r\n\r\n/**\r\n * Gets the top collaborations for actor/director and actor/actor collaborations\r\n *\r\n * @param {Array} movies Array of movie objects\r\n * @param {number} limit Number of top collaborations to return (default 20)\r\n * @returns {object} Object with the top actor/director and actor/actor collaborations\r\n */\r\nexport function getTopCollaborations (movies, limit = 20) {\r\n  const allCollabs = countCollaborations(movies)\r\n\r\n  return {\r\n    topActorDirectorCollabs: allCollabs.actorDirectorCollabs.slice(0, limit),\r\n    topActorActorCollabs: allCollabs.actorActorCollabs.slice(0, limit)\r\n  }\r\n}\r\n\r\n/**\r\n * Counts the amount of collaborations between actors and directors, and also between actors themselves\r\n *\r\n * @param {Array} movies Array of movie objects with casts and directors properties\r\n * @returns {object} Object containing actorDirectorCollabs and actorActorCollabs\r\n */\r\nfunction countCollaborations (movies) {\r\n  const actorDirectorCollabs = {}\r\n  const actorActorCollabs = {}\r\n\r\n  const createCollabObject = (isSameType, participant1, participant2) => {\r\n    return {\r\n      [isSameType ? 'actor1' : 'actor']: participant1,\r\n      [isSameType ? 'actor2' : 'director']: participant2,\r\n      movies: [],\r\n      genres: [],\r\n      mostPopularGenre: null,\r\n      count: 0,\r\n      ...MetricsHelper.createMetricsObject()\r\n    }\r\n  }\r\n\r\n  const addMovieToCollab = (collab, movie) => {\r\n    if (collab.movies.includes(movie.name)) return\r\n\r\n    collab.count++\r\n    collab.movies.push(movie.name)\r\n\r\n    MetricsHelper.addMovieMetrics(collab, movie)\r\n\r\n    if (movie.genre) {\r\n      const genres = Array.isArray(movie.genre) ? movie.genre : [movie.genre]\r\n      genres.forEach(genre => {\r\n        if (genre && genre.trim()) collab.genres.push(genre.trim())\r\n      })\r\n    }\r\n  }\r\n\r\n  movies.forEach(movie => {\r\n    const castMembers = movie.casts || []\r\n    const directors = movie.directors || []\r\n\r\n    castMembers.forEach(actor => {\r\n      if (!actor) return\r\n\r\n      directors.forEach(director => {\r\n        if (!director) return\r\n\r\n        const key = `${actor}/${director}`\r\n\r\n        if (!actorDirectorCollabs[key]) {\r\n          actorDirectorCollabs[key] = createCollabObject(false, actor, director)\r\n        }\r\n\r\n        addMovieToCollab(actorDirectorCollabs[key], movie)\r\n      })\r\n    })\r\n\r\n    for (let i = 0; i < castMembers.length; i++) {\r\n      const actor1 = castMembers[i]\r\n      if (!actor1) continue\r\n\r\n      for (let j = i + 1; j < castMembers.length; j++) {\r\n        const actor2 = castMembers[j]\r\n        if (!actor2) continue\r\n\r\n        const actorPair = [actor1, actor2].sort()\r\n        const key = `${actorPair[0]}/${actorPair[1]}`\r\n\r\n        if (!actorActorCollabs[key]) {\r\n          actorActorCollabs[key] = createCollabObject(true, actorPair[0], actorPair[1])\r\n        }\r\n\r\n        addMovieToCollab(actorActorCollabs[key], movie)\r\n      }\r\n    }\r\n  })\r\n\r\n  const finalizeCollabs = collabs => {\r\n    return Object.values(collabs).map(collab => {\r\n      MetricsHelper.calculateAverages(collab)\r\n\r\n      if (collab.genres.length) {\r\n        const { mostPopularGenre } = MetricsHelper.findMostPopularGenre(collab.genres)\r\n        collab.mostPopularGenre = mostPopularGenre\r\n      }\r\n\r\n      MetricsHelper.cleanupMetricsProperties(collab)\r\n      delete collab.genres\r\n\r\n      return collab\r\n    }).sort((a, b) => b.count - a.count)\r\n  }\r\n\r\n  return {\r\n    actorDirectorCollabs: finalizeCollabs(actorDirectorCollabs),\r\n    actorActorCollabs: finalizeCollabs(actorActorCollabs)\r\n  }\r\n}\r\n\r\nexport function getCertificateData (movies) {\r\n  const createCertificateObject = () => {\r\n    return {\r\n      movies: [],\r\n      count: 0,\r\n      genres: [],\r\n      mostPopularGenre: null,\r\n      ...MetricsHelper.createMetricsObject()\r\n    }\r\n  }\r\n\r\n  const certificateData = movies.reduce((certificateList, movie) => {\r\n    const certificate = typeof movie.certificate === 'string' ? movie.certificate.toLowerCase() : 'unknown'\r\n\r\n    if (!certificateList[certificate]) certificateList[certificate] = createCertificateObject()\r\n\r\n    certificateList[certificate].movies.push({ name: movie.name })\r\n    certificateList[certificate].count++\r\n\r\n    MetricsHelper.addMovieMetrics(certificateList[certificate], movie)\r\n\r\n    if (movie.genre) {\r\n      const genres = Array.isArray(movie.genre) ? movie.genre : [movie.genre]\r\n      genres.forEach(genre => {\r\n        if (genre && genre.trim()) certificateList[certificate].genres.push(genre.trim())\r\n      })\r\n    }\r\n\r\n    return certificateList\r\n  }, {})\r\n\r\n  Object.keys(certificateData).forEach(certificate => {\r\n    const data = certificateData[certificate]\r\n    MetricsHelper.calculateAverages(data)\r\n\r\n    if (data.genres.length) {\r\n      const { mostPopularGenre, genreCounts } = MetricsHelper.findMostPopularGenre(data.genres)\r\n      data.mostPopularGenre = mostPopularGenre\r\n      data.genreCounts = genreCounts\r\n    }\r\n\r\n    MetricsHelper.cleanupMetricsProperties(data)\r\n    delete data.genres\r\n  })\r\n\r\n  return certificateData\r\n}\r\n\r\nexport function getDataBySeason (movies) {\r\n  const createSeasonObject = (beginDate, endDate) => ({\r\n    beginDate,\r\n    endDate,\r\n    movies: [],\r\n    count: 0,\r\n    genres: [],\r\n    mostPopularGenre: null,\r\n    ...MetricsHelper.createMetricsObject()\r\n  })\r\n\r\n  const seasons = {\r\n    spring: createSeasonObject('03-20', '06-20'),\r\n    summer: createSeasonObject('06-21', '09-22'),\r\n    fall: createSeasonObject('09-23', '12-20'),\r\n    winter: createSeasonObject('12-21', '03-19')\r\n  }\r\n\r\n  const getSeason = (dateString) => {\r\n    if (!dateString || typeof dateString !== 'string') return null\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    const [year, month, day] = dateString.split('-').map(num => parseInt(num, 10))\r\n    const monthDay = `${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`\r\n\r\n    if (monthDay >= '03-20' && monthDay <= '06-20') return 'spring'\r\n    else if (monthDay >= '06-21' && monthDay <= '09-22') return 'summer'\r\n    else if (monthDay >= '09-23' && monthDay <= '12-20') return 'fall'\r\n    else return 'winter'\r\n  }\r\n\r\n  movies.forEach(movie => {\r\n    const season = getSeason(movie.releaseDate)\r\n    if (season === null) return\r\n\r\n    seasons[season].movies.push(movie)\r\n    seasons[season].count++\r\n\r\n    MetricsHelper.addMovieMetrics(seasons[season], movie)\r\n\r\n    if (movie.genre) {\r\n      const genres = Array.isArray(movie.genre) ? movie.genre : [movie.genre]\r\n      genres.forEach(genre => {\r\n        if (genre && genre.trim()) seasons[season].genres.push(genre.trim())\r\n      })\r\n    }\r\n  })\r\n\r\n  Object.keys(seasons).forEach(season => {\r\n    const data = seasons[season]\r\n    MetricsHelper.calculateAverages(data)\r\n\r\n    if (data.genres.length) {\r\n      const { mostPopularGenre, genreCounts } = MetricsHelper.findMostPopularGenre(data.genres)\r\n      data.mostPopularGenre = mostPopularGenre\r\n      data.genreCounts = genreCounts\r\n    }\r\n\r\n    MetricsHelper.cleanupMetricsProperties(data)\r\n    delete data.genres\r\n  })\r\n\r\n  return seasons\r\n}\r\n\r\nexport function getMovieLengthData (movies, intervalSize = 10) {\r\n  let minRuntime = Number.MAX_VALUE\r\n  let maxRuntime = 0\r\n\r\n  movies.forEach(movie => {\r\n    const runtime = parseRuntime(movie.run_time)\r\n    if (runtime) {\r\n      minRuntime = Math.min(minRuntime, runtime)\r\n      maxRuntime = Math.max(maxRuntime, runtime)\r\n    }\r\n  })\r\n\r\n  const firstInterval = Math.floor(minRuntime / intervalSize) * intervalSize\r\n  const lastInterval = Math.floor(maxRuntime / intervalSize) * intervalSize\r\n\r\n  const intervals = []\r\n  for (let minutes = firstInterval; minutes <= lastInterval; minutes += intervalSize) {\r\n    intervals.push({\r\n      startMinutes: minutes,\r\n      endMinutes: minutes + (intervalSize - 1),\r\n      label: `${minutes}s`,\r\n      movies: [],\r\n      nMovies: 0,\r\n      genres: [],\r\n      ...MetricsHelper.createMetricsObject()\r\n    })\r\n  }\r\n\r\n  movies.forEach(movie => {\r\n    const movieRuntime = parseRuntime(movie.run_time)\r\n    const interval = intervals.find(interval => movieRuntime >= interval.startMinutes && movieRuntime <= interval.endMinutes)\r\n    if (!interval) return\r\n\r\n    interval.movies.push(movie)\r\n    interval.nMovies++\r\n\r\n    MetricsHelper.addMovieMetrics(interval, movie)\r\n\r\n    if (movie.genre) {\r\n      const genres = Array.isArray(movie.genre) ? movie.genre : [movie.genre]\r\n      genres.forEach(genre => {\r\n        if (genre && genre.trim()) interval.genres.push(genre.trim())\r\n      })\r\n    }\r\n  })\r\n\r\n  intervals.forEach(interval => {\r\n    MetricsHelper.calculateAverages(interval)\r\n\r\n    if (interval.genres.length) {\r\n      const { mostPopularGenre, genreCounts } = MetricsHelper.findMostPopularGenre(interval.genres)\r\n      interval.mostPopularGenre = mostPopularGenre\r\n      interval.genreCounts = genreCounts\r\n    }\r\n\r\n    MetricsHelper.cleanupMetricsProperties(interval)\r\n    delete interval.genres\r\n  })\r\n\r\n  return intervals\r\n}\r\n\r\nexport function getTaglineWordsData (movies, minWordLength = 3, minOccurrences = 2) {\r\n  const createWordObject = () => {\r\n    return {\r\n      movies: [],\r\n      count: 0,\r\n      genres: [],\r\n      mostPopularGenre: null,\r\n      ...MetricsHelper.createMetricsObject()\r\n    }\r\n  }\r\n\r\n  const wordCounts = {}\r\n  movies.forEach(movie => {\r\n    if (!movie.tagline || typeof movie.tagline !== 'string') return\r\n\r\n    const words = movie.tagline\r\n      .toLowerCase()\r\n      .replace(/[^\\w\\s]/g, '')\r\n      .split(/\\s+/)\r\n      .filter(word =>\r\n        word.length >= minWordLength &&\r\n        !stopWords.has(word)\r\n      )\r\n\r\n    words.forEach(word => {\r\n      if (!wordCounts[word]) wordCounts[word] = 0\r\n      wordCounts[word]++\r\n    })\r\n  })\r\n\r\n  const significantWords = Object.keys(wordCounts)\r\n    .filter(word => wordCounts[word] >= minOccurrences)\r\n\r\n  const wordData = {}\r\n  significantWords.forEach(word => {\r\n    wordData[word] = createWordObject()\r\n  })\r\n\r\n  movies.forEach(movie => {\r\n    if (!movie.tagline || typeof movie.tagline !== 'string') return\r\n\r\n    const movieWords = new Set(\r\n      movie.tagline\r\n        .toLowerCase()\r\n        .replace(/[^\\w\\s]/g, '')\r\n        .split(/\\s+/)\r\n        .filter(word => significantWords.includes(word))\r\n    )\r\n\r\n    movieWords.forEach(word => {\r\n      wordData[word].movies.push({\r\n        name: movie.name,\r\n        year: movie.year,\r\n        tagline: movie.tagline\r\n      })\r\n\r\n      wordData[word].count++\r\n\r\n      MetricsHelper.addMovieMetrics(wordData[word], movie)\r\n\r\n      if (movie.genre) {\r\n        const genres = Array.isArray(movie.genre) ? movie.genre : [movie.genre]\r\n        genres.forEach(genre => {\r\n          if (genre && genre.trim()) wordData[word].genres.push(genre.trim())\r\n        })\r\n      }\r\n    })\r\n  })\r\n\r\n  Object.keys(wordData).forEach(word => {\r\n    const data = wordData[word]\r\n    MetricsHelper.calculateAverages(data)\r\n\r\n    if (data.genres.length) {\r\n      const { mostPopularGenre, genreCounts } = MetricsHelper.findMostPopularGenre(data.genres)\r\n      data.mostPopularGenre = mostPopularGenre\r\n      data.genreCounts = genreCounts\r\n    }\r\n\r\n    MetricsHelper.cleanupMetricsProperties(data)\r\n    delete data.genres\r\n  })\r\n\r\n  const result = Object.entries(wordData)\r\n    .map(([word, data]) => ({\r\n      word,\r\n      ...data\r\n    }))\r\n    .sort((a, b) => b.count - a.count)\r\n\r\n  return result\r\n}\r\n\r\nexport function getTaglineLengthData (movies) {\r\n  const lengthMap = {}\r\n\r\n  const createLengthObject = () => {\r\n    return {\r\n      movies: [],\r\n      count: 0,\r\n      wordCount: 0,\r\n      ...MetricsHelper.createMetricsObject()\r\n    }\r\n  }\r\n\r\n  movies.forEach(movie => {\r\n    if (!movie.tagline || typeof movie.tagline !== 'string') return\r\n\r\n    const tagline = movie.tagline.trim()\r\n    if (tagline.length === 0) return\r\n\r\n    const length = tagline.length\r\n\r\n    if (!lengthMap[length]) lengthMap[length] = createLengthObject()\r\n    lengthMap[length].movies.push({\r\n      name: movie.name,\r\n      year: movie.year,\r\n      tagline: movie.tagline\r\n    })\r\n    lengthMap[length].count++\r\n\r\n    const wordCount = tagline.split(/\\s+/).length\r\n\r\n    lengthMap[length].wordCount += wordCount\r\n    MetricsHelper.addMovieMetrics(lengthMap[length], movie)\r\n  })\r\n\r\n  const result = Object.entries(lengthMap).map(([length, data]) => {\r\n    MetricsHelper.calculateAverages(data)\r\n\r\n    data.avgWordCount = data.wordCount / data.count\r\n    delete data.wordCount\r\n\r\n    MetricsHelper.cleanupMetricsProperties(data)\r\n    delete data.genres\r\n\r\n    return {\r\n      length: parseInt(length, 10),\r\n      ...data\r\n    }\r\n  })\r\n\r\n  return result.sort((a, b) => a.length - b.length)\r\n}\r\n","// 'use strict'\n\nimport { addGoldenGlobesData, getGoldenGlobesMovieData } from './scripts/process_golden_globes'\nimport { addOscarsData, getOscarsMovieData } from './scripts/process_oscars'\nimport { addAdditionalMovieData, getAdditionalMovieData } from './scripts/process_additional_movie_data'\nimport { processMovieData } from './scripts/process_imdb'\nimport {\n  getFilmContributorsData, getGenreDataIntervals,\n  getTopCollaborations, getCertificateData, getDataBySeason, getMovieLengthData, getTaglineWordsData, getTaglineLengthData\n} from './scripts/preprocess_data'\n\n// import * as helper from './scripts/helper.js'\n// import * as preproc from './scripts/preprocess_imbd_data.js'\n// import * as viz from './scripts/viz.js'\n// import * as legend from './scripts/legend.js'\n// import * as hover from './scripts/hover.js'\n// import * as util from './scripts/util.js'\n\n// import * as d3Chromatic from 'd3-scale-chromatic'\n\n/**\n * @file This file is the entry-point for the the code for TP3 for the course INF8808.\n * @author Olivia Gélinas\n * @version v1.0.0\n */\n\n(function (d3) {\n  // let bounds\n  // let svgSize\n  // let graphSize\n\n  // const margin = { top: 35, right: 200, bottom: 35, left: 200 }\n\n  // const xScale = d3.scaleBand().padding(0.05)\n  // const yScale = d3.scaleBand().padding(0.2)\n  // const colorScale = d3.scaleSequential(d3Chromatic.interpolateYlGnBu)\n\n  Promise.all([\n    d3.csv('./golden_globe_awards.csv', d3.autoType),\n    d3.csv('./IMDB_Top_250_Movies.csv', d3.autoType),\n    d3.csv('./movie_dataset.csv', d3.autoType),\n    d3.csv('./the_oscar_award.csv', d3.autoType)\n  ]).then(function ([goldenGlobes, imdb, movies, oscars]) {\n    imdb = processMovieData(imdb)\n\n    const movieNames = imdb.reduce((acc, movie) => {\n      if (!movie.name) return acc\n\n      const nameStr = String(movie.name)\n      const cleanName = nameStr.toLowerCase().replace(/[^a-z0-9\\s]/g, '')\n\n      if (!acc.includes(cleanName) && cleanName.trim() !== '') acc.push(cleanName)\n      return acc\n    }, [])\n\n    const oscarMovies = getOscarsMovieData(oscars, movieNames)\n    imdb = addOscarsData(imdb, oscarMovies)\n\n    const goldenGlobesMovies = getGoldenGlobesMovieData(goldenGlobes, movieNames)\n    imdb = addGoldenGlobesData(imdb, goldenGlobesMovies)\n\n    const additionalMovieData = getAdditionalMovieData(movies, movieNames)\n    imdb = addAdditionalMovieData(imdb, additionalMovieData)\n\n    const contributorData = getFilmContributorsData(imdb)\n    const genreData = getGenreDataIntervals(imdb)\n\n    const collaborationsData = getTopCollaborations(imdb)\n\n    const certificateData = getCertificateData(imdb)\n    const seasonalData = getDataBySeason(imdb)\n\n    const movieLengthData = getMovieLengthData(imdb)\n    const taglineWordData = getTaglineWordsData(imdb)\n    const taglineLengthData = getTaglineLengthData(imdb)\n    console.log(taglineLengthData)\n\n    // }, [])\n    // d3.csv('./golden_globe_awards.csv', d3.autoType).then(function (data) {\n    //   console.log(data)\n    //   const neighborhoodNames = preproc.getNeighborhoodNames(data)\n    //   data = preproc.filterYears(data, 2010, 2020)\n\n    //   data = preproc.summarizeYearlyCounts(data)\n    //   data = preproc.fillMissingData(data, neighborhoodNames, 2010, 2020, util.range)\n\n    // viz.setColorScaleDomain(colorScale, data)\n\n    // legend.initGradient(colorScale)\n    // legend.initLegendBar()\n    // legend.initLegendAxis()\n\n    // const g = helper.generateG(margin)\n\n    // helper.appendAxes(g)\n    // viz.appendRects(data)\n\n    // setSizing()\n    // build()\n\n    /**\n     *   This function handles the graph's sizing.\n     */\n    // function setSizing () {\n    //   bounds = d3.select('.graph').node().getBoundingClientRect()\n\n    //   svgSize = {\n    //     width: bounds.width,\n    //     height: 550\n    //   }\n\n    //   graphSize = {\n    //     width: svgSize.width - margin.right - margin.left,\n    //     height: svgSize.height - margin.bottom - margin.top\n    //   }\n\n    //   helper.setCanvasSize(svgSize.width, svgSize.height)\n    // }\n\n    /**\n     *   This function builds the graph.\n     */\n    // function build () {\n    //   viz.updateXScale(xScale, data, graphSize.width, util.range)\n    //   viz.updateYScale(yScale, neighborhoodNames, graphSize.height)\n\n    //   viz.drawXAxis(xScale)\n    //   viz.drawYAxis(yScale, graphSize.width)\n\n    //   viz.rotateYTicks()\n\n    //   viz.updateRects(xScale, yScale, colorScale)\n\n    //   hover.setRectHandler(xScale, yScale, hover.rectSelected, hover.rectUnselected, hover.selectTicks, hover.unselectTicks)\n\n    //   legend.draw(margin.left / 2, margin.top + 5, graphSize.height - 10, 15, 'url(#gradient)', colorScale)\n    // }\n\n    // window.addEventListener('resize', () => {\n    //   setSizing()\n    //   build()\n    // })\n  })\n})(d3)\n","var OVERLAY_ID = '__parcel__error__overlay__';\n\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n\n  module.bundle.hotData = null;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets, assetsToAccept;\n\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = process.env.HMR_HOSTNAME || location.hostname;\n  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + ':' + process.env.HMR_PORT + '/');\n  ws.onmessage = function(event) {\n    checkedAssets = {};\n    assetsToAccept = [];\n\n    var data = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      var handled = false;\n      data.assets.forEach(function(asset) {\n        if (!asset.isNew) {\n          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);\n          if (didAccept) {\n            handled = true;\n          }\n        }\n      });\n\n      // Enable HMR for CSS by default.\n      handled = handled || data.assets.every(function(asset) {\n        return asset.type === 'css' && asset.generated.js;\n      });\n\n      if (handled) {\n        console.clear();\n\n        data.assets.forEach(function (asset) {\n          hmrApply(global.parcelRequire, asset);\n        });\n\n        assetsToAccept.forEach(function (v) {\n          hmrAcceptRun(v[0], v[1]);\n        });\n      } else if (location.reload) { // `location` global exists in a web worker context but lacks `.reload()` function.\n        location.reload();\n      }\n    }\n\n    if (data.type === 'reload') {\n      ws.close();\n      ws.onclose = function () {\n        location.reload();\n      }\n    }\n\n    if (data.type === 'error-resolved') {\n      console.log('[parcel] ✨ Error resolved');\n\n      removeErrorOverlay();\n    }\n\n    if (data.type === 'error') {\n      console.error('[parcel] 🚨  ' + data.error.message + '\\n' + data.error.stack);\n\n      removeErrorOverlay();\n\n      var overlay = createErrorOverlay(data);\n      document.body.appendChild(overlay);\n    }\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n  }\n}\n\nfunction createErrorOverlay(data) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n\n  // html encode message and stack trace\n  var message = document.createElement('div');\n  var stackTrace = document.createElement('pre');\n  message.innerText = data.error.message;\n  stackTrace.innerText = data.error.stack;\n\n  overlay.innerHTML = (\n    '<div style=\"background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;\">' +\n      '<span style=\"background: red; padding: 2px 4px; border-radius: 2px;\">ERROR</span>' +\n      '<span style=\"top: 2px; margin-left: 5px; position: relative;\">🚨</span>' +\n      '<div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">' + message.innerHTML + '</div>' +\n      '<pre>' + stackTrace.innerHTML + '</pre>' +\n    '</div>'\n  );\n\n  return overlay;\n\n}\n\nfunction getParents(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || (Array.isArray(dep) && dep[dep.length - 1] === id)) {\n        parents.push(k);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction hmrApply(bundle, asset) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (modules[asset.id] || !bundle.parent) {\n    var fn = new Function('require', 'module', 'exports', asset.generated.js);\n    asset.isNew = !modules[asset.id];\n    modules[asset.id] = [fn, asset.deps];\n  } else if (bundle.parent) {\n    hmrApply(bundle.parent, asset);\n  }\n}\n\nfunction hmrAcceptCheck(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (!modules[id] && bundle.parent) {\n    return hmrAcceptCheck(bundle.parent, id);\n  }\n\n  if (checkedAssets[id]) {\n    return;\n  }\n  checkedAssets[id] = true;\n\n  var cached = bundle.cache[id];\n\n  assetsToAccept.push([bundle, id]);\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n\n  return getParents(global.parcelRequire, id).some(function (id) {\n    return hmrAcceptCheck(global.parcelRequire, id)\n  });\n}\n\nfunction hmrAcceptRun(bundle, id) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n  if (cached) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n\n  cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      cb();\n    });\n    return true;\n  }\n}\n"]}