{"version":3,"sources":["scripts/helper.js","scripts/process_golden_globes.js","scripts/process_oscars.js","scripts/process_additional_movie_data.js","scripts/process_imdb.js","scripts/preprocess_data.js","index.js"],"names":["cleanMovieName","name","nameStr","String","articlePattern","articleMatch","match","concat","toLowerCase","replace","adjustForInflation","moneterayAmount","movieYear","topYear","nYears","inflationRate","i","Number","toFixed","parseRuntime","runtimeString","totalMins","hoursMatch","minutesMatch","parseInt","stopWords","exports","Set","_helper","require","_typeof","o","Symbol","iterator","constructor","prototype","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","value","configurable","writable","_toPrimitive","toPrimitive","call","TypeError","getGoldenGlobesMovieData","goldenGlobes","movieNames","reduce","acc","item","cleanName","film","includes","isWinner","win","nominations","year","year_film","nominee","winner","nbNominations","nbWins","addGoldenGlobesData","imdb","goldenGlobesMovies","map","movie","enhancedMovie","goldenGlobesData","goldenGlobesNominees","goldenGlobesNominations","goldenGlobesWins","getOscarsMovieData","oscars","addOscarsData","oscarMovies","oscarsData","oscarNominees","oscarNominations","oscarWins","getAdditionalMovieData","movies","original_title","companies","production_companies","pCompaniesData","JSON","parse","Array","isArray","pCompany","Boolean","releaseDate","release_date","Date","toISOString","split","error","keywords","popularity","productionCompanies","budget","revenue","addAdditionalMovieData","additionalData","boxOffice","processMovieData","data","stringToArray","fieldName","trim","processedMovie","fieldsToProcess","field","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","a","_arrayLikeToArray","toString","slice","from","test","n","l","u","f","next","done","return","MetricsHelper","standardMetrics","property","movieProperty","createMetricsObject","metricsObject","metric","charAt","toUpperCase","addMovieMetrics","currObject","totalProp","countProp","isNaN","calculateAverages","avgProp","cleanupMetricsProperties","findMostPopularGenre","genres","genreCounts","genre","maxCount","mostPopularGenre","entries","_ref","_ref2","count","getFilmContributorsData","contributors","casts","directors","writers","contributorCategories","createContributorObject","nMovies","movieInfo","_ref3","_ref4","categoryName","person","category","getGenreDataIntervals","decades","createYearIntervals","decade","mostCommonGenre","allGenres","_MetricsHelper$findMo","intervalSize","undefined","minYear","min","MAX_VALUE","maxYear","max","MIN_VALUE","firstDecade","Math","floor","lastDecade","intervals","decadeYears","startYear","endYear","label","interval","find","getTopCollaborations","limit","allCollabs","countCollaborations","topActorDirectorCollabs","actorDirectorCollabs","topActorActorCollabs","actorActorCollabs","createCollabObject","isSameType","participant1","participant2","addMovieToCollab","collab","castMembers","actor","director","key","actor1","j","actor2","actorPair","sort","finalizeCollabs","collabs","values","_MetricsHelper$findMo2","b","getCertificateData","createCertificateObject","certificateData","certificateList","certificate","_MetricsHelper$findMo3","getDataBySeason","createSeasonObject","beginDate","endDate","seasons","spring","summer","fall","winter","getSeason","dateString","_dateString$split$map","num","_dateString$split$map2","month","day","monthDay","padStart","season","_MetricsHelper$findMo4","getMovieLengthData","minRuntime","maxRuntime","runtime","run_time","firstInterval","lastInterval","minutes","startMinutes","endMinutes","movieRuntime","_MetricsHelper$findMo5","getTaglineWordsData","minWordLength","minOccurrences","createWordObject","wordCounts","tagline","words","word","has","significantWords","wordData","movieWords","_MetricsHelper$findMo6","result","_ref5","_ref6","getTaglineLengthData","lengthMap","createLengthObject","wordCount","_ref7","_ref8","avgWordCount","calculateMovieProfits","box_office","profit","getMoviesByGenre","genreData","genreName","_process_golden_globes","_process_oscars","_process_additional_movie_data","_process_imdb","_preprocess_data","d3","Promise","all","csv","autoType","then","additionalMovieData","console","log","contributorData","genreIntervalData","collaborationsData","seasonalData","movieLengthData","taglineWordData","taglineLengthData"],"mappings":";;AMEA,IAAA0T,sBAAA,GAAA7R,OAAA;AACA,IAAA8R,eAAA,GAAA9R,OAAA;AACA,IAAA+R,8BAAA,GAAA/R,OAAA;AACA,IAAAgS,aAAA,GAAAhS,OAAA;AACA,IAAAiS,gBAAA,GAAAjS,OAAA;AAKA,AHXA,AFAA,ACAA,IIWAD,AHXAA,AFAAA,ACAAA,OIWA,AHXA,AFAA,ACAA,GIWAC,AHXAA,AFAAA,ACAAA,OIWA,AHXA,AFAA,ACAA;AIWwD,AHXf,AFAA,ACAA,SIWeyG,AHXfxG,AFAAA,ACAAA,QCAAC,AFAAA,ACAAA,CCAA,AFAA,ACAA,MIWeO,CAAA,EAAAD,CAAA,WAAAkG,eAAA,CAAAjG,CAAA,AHXfR,AFAAA,ACAAA,KIWe0G,EHXf,AFAA,ACAA,mBIWe,CAAAlG,CAAA,EAAAD,CAAA,AHXfL,AFAAA,ACAAA,KIWeyG,CHXf,AFAA,ACAA,uBCAAzG,AFAAA,ACAAA,GIWe,CAAAM,CAAA,CHXf,AFAA,ACAA,CIWeD,AHXfJ,AFAAA,ACAAA,CIWe,KAAAyG,EHXf,AFAA,ACAA,aCAA3G,AFAAA,ACAAA,CIWe,AHXf,AFAA,ACAA,kBCAAA,AFAAA,ACAAA,CCAA,AFAA,ACAA,gBCAAA,AFAAA,ACAAA,CCAA,AFAA,ACAA,WCAAA,AFAAA,ACAAA,CCAA,AFAA,ACAA,yBCAAC,AFAAA,ACAAA,MCAA,AFAA,ACAA,ICAAD,AFAAA,ACAAA,CCAA,AFAA,ACAA,CCAAG,AFAAA,ACAAA,WCAA,AFAA,ACAA,KCAAF,AFAAA,ACAAA,MCAA,AFAA,ACAA,ICAAD,AFAAA,ACAAA,CCAA,AFAA,ACAA,KCAAC,AFAAA,ACAAA,MCAA,AFAA,ACAA,CCAAG,AFAAA,ACAAA,SCAA,AFAA,ACAA,qBCAAJ,AFAAA,ACAAA,CCAA,AFAA,ACAA,KCAAD,AFAAA,ACAAA,OCAA,AFAA,ACAA,CCAAC,AFAAA,ACAAA,CCAA,AFAA,ACAA;AIWe,ANVxD,AGDyC,AFAA,ACAA,SIWe2G,AHXftG,AFAAA,ACAAA,QCAAC,AFAAA,ACAAA,CCAA,AFAA,ACAA,ECAAC,AFAAA,ACAAA,CCAA,AFAA,ACAA,KIWe,GHXfC,AFAAA,ACAAA,CCAA,AFAA,ACAA,GCAAC,AFAAA,ACAAA,MCAA,AFAA,ACAA,CIWeuB,AHXftB,AFAAA,ACAAA,ICAA,AFAA,ACAA,CCAAJ,AFAAA,ACAAA,CCAA,AFAA,ACAA,GIWe,IHXfG,AFAAA,ACAAA,MCAA,AFAA,ACAA,CCAAE,AFAAA,ACAAA,qBCAA,AFAA,ACAA,QCAAX,AFAAA,ACAAA,CCAA,AFAA,ACAA,GCAAS,AFAAA,ACAAA,MCAA,AFAA,ACAA,CCAAE,AFAAA,ACAAA,qBCAA,AFAA,ACAA,CCAAL,AFAAA,ACAAA,CCAA,AFAA,ACAA,GCAAC,AFAAA,ACAAA,CCAA,AFAA,ACAA,KCAAP,AFAAA,ACAAA,CCAA,AFAA,ACAA,GCAAA,AFAAA,ACAAA,CCAA,AFAA,ACAA,CCAAY,AFAAA,ACAAA,MCAA,AFAA,ACAA,WCAAL,AFAAA,ACAAA,CCAA,AFAA,ACAA,WCAAE,AFAAA,ACAAA,MCAA,AFAA,ACAA,CCAAI,AFAAA,ACAAA,wBCAA,AFAA,ACAA,CCAAP,AFAAA,ACAAA,CCAA,AFAA,ACAA,ECAAC,AFAAA,ACAAA,CCAA,AFAA,ACAA,ECAAO,AFAAA,ACAAA,UCAA,AFAA,ACAA,OCAAN,AFAAA,ACAAA,CCAA,AFAA,ACAA,CCAAO,AFAAA,ACAAA,ICAA,AFAA,ACAA,CCAAC,AFAAA,ACAAA,KCAA,AFAA,ACAA,CCAAR,AFAAA,ACAAA,CCAA,AFAA,ACAA,ECAAR,AFAAA,ACAAA,CCAA,AFAA,ACAA,YCAAQ,AFAAA,ACAAA,CCAA,AFAA,ACAA;AIWe,ANTxD,AGFyC,AFAA,ACAA,SIWekG,AHXfzF,AFAAA,ACAAA,cCAAX,AFAAA,ACAAA,CCAA,AFAA,ACAA,aIWeC,AHXfA,AFAAA,ACAAA,CIWe,AHXf,AFAA,ACAA,EIWeqG,CAAA,GHXfrG,AFAAA,ACAAA,CCAA,AFAA,ACAA,GCAAW,AFAAA,ACAAA,CIWeX,CAAA,OHXf,AFAA,ACAA,CCAAY,AFAAA,ACAAA,MCAA,AFAA,ACAA,ECAAZ,AFAAA,ACAAA,CCAA,AFAA,ACAA,UIWeA,AHXfC,AFAAA,ACAAA,CIWe,AHXf,AFAA,ACAA,SIWeqG,EHXf3F,AFAAA,ACAAA,SCAA,AFAA,ACAA,CCAAX,AFAAA,ACAAA,CCAA,AFAA,ACAA,IIWe,AHXfW,AFAAA,ACAAA,CIWeX,CAAA,EAAAqG,CAAA,IHXf,AFAA,ACAA,CCAArG,AFAAA,ACAAA,CCAA,AFAA,ACAA,CIWeC,CAAA,MAAAsG,AHXfvG,AFAAA,ACAAA,CCAA,AFAA,ACAA,OIWe,AHXfF,AFAAA,ACAAA,CIWe0B,IAAA,CAAAxB,CAAA,AHXf,AFAA,ACAA,CCAAE,AFAAA,ACAAA,CIWesG,KAAA,AHXf,AFAA,ACAA,CCAAvG,AFAAA,ACAAA,CCAA,AFAA,ACAA,OCAAY,AFAAA,ACAAA,OCAA,AFAA,ACAA,WCAAb,AFAAA,ACAAA,CCAA,AFAA,ACAA,CIWeC,CAAA,EHXfa,AFAAA,ACAAA,EIWed,CAAA,CAAAJ,WAAA,AHXf,AFAA,ACAA,CCAAG,AFAAA,ACAAA,CCAA,AFAA,ACAA,ECAAC,AFAAA,ACAAA,CIWeC,AHXf,AFAA,ACAA,CIWe,CHXfA,AFAAA,ACAAA,CCAA,AFAA,ACAA,CIWeD,AHXfA,AFAAA,ACAAA,CIWe,AHXf,AFAA,ACAA,CIWeJ,QHXfM,AFAAA,ACAAA,GIWe,CAAAvC,EHXf,AFAA,ACAA,CCAAoD,AFAAA,ACAAA,CIWe,aAAAd,CAAA,UHXf,AFAA,ACAA,GCAAC,AFAAA,ACAAA,CIWeD,CAAA,GAAAqE,CHXf,AFAA,ACAA,CCAAtD,AFAAA,ACAAA,GIWe,CAAAyF,IAAA,CAAAzG,CAAA,MHXf,AFAA,ACAA,CCAAD,AFAAA,ACAAA,CCAA,AFAA,ACAA,ECAAG,AFAAA,ACAAA,MCAA,AFAA,ACAA,CCAAa,AFAAA,ACAAA,GIWed,CAAA,qBHXf,AFAA,ACAA,CCAAA,AFAAA,ACAAA,CCAA,AFAA,ACAA,KCAAH,AFAAA,ACAAA,OCAA,AFAA,ACAA,CCAAI,AFAAA,ACAAA,MCAA,AFAA,ACAA,CCAAD,AFAAA,ACAAA,CCAA,AFAA,ACAA,GIWeyG,AHXf7F,AFAAA,ACAAA,IIWe,CAAAZ,CAAA,CHXf,AFAA,ACAA,GIWeqG,QHXftG,AFAAA,ACAAA,CCAA,AFAA,ACAA,ICAAE,AFAAA,ACAAA,IIWe,CAAAF,CAAA,AHXf,AFAA,ACAA,CCAAiB,AFAAA,ACAAA,CIWeoF,CAAA,YHXf,AFAA,ACAA,CCAAtG,AFAAA,ACAAA,CCAA,AFAA,ACAA,ECAAC,AFAAA,ACAAA,CCAA,AFAA,ACAA,ECAAE,AFAAA,ACAAA,MCAA,AFAA,ACAA,CCAAI,AFAAA,ACAAA,wBCAA,AFAA,ACAA,CCAAL,AFAAA,ACAAA,CCAA,AFAA,ACAA,ECAAD,AFAAA,ACAAA,CCAA,AFAA,ACAA,iBCAAD,AFAAA,ACAAA,CCAA,AFAA,ACAA;AIWe,ANRxD,AGHyC,AFAA,ACAA,SIWeuG,AHXfxF,AFAAA,ACAAA,gBCAAf,AFAAA,ACAAA,CCAA,AFAA,ACAA,CIWeC,CAAA,AHXfA,AFAAA,ACAAA,CCAA,AFAA,ACAA,CIWeqG,CAAA,AHXfpG,AFAAA,ACAAA,CCAA,AFAA,ACAA,YIWeoG,AHXfrG,AFAAA,ACAAA,CIWe,AHXf,AFAA,ACAA,GCAAkB,AFAAA,ACAAA,CIWemF,CAAA,GAAArG,CAAA,CAAAY,MAAA,CHXf,AFAA,ACAA,CCAAZ,AFAAA,ACAAA,CCAA,AFAA,ACAA,GIWeqG,CAAA,EHXftG,AFAAA,ACAAA,CIWeC,AHXf,AFAA,ACAA,CIWe,CAAAY,CHXfV,AFAAA,ACAAA,KIWe,CHXf,AFAA,ACAA,CCAAe,AFAAA,ACAAA,UIWelB,CAAA,GHXf,AFAA,ACAA,CCAAA,AFAAA,ACAAA,CCAA,AFAA,ACAA,CIWe4G,CAAA,AHXf3G,AFAAA,ACAAA,CCAA,AFAA,ACAA,EIWesE,EHXfnD,AFAAA,ACAAA,GIWe,CAAAkF,CAAA,AHXf,AFAA,ACAA,ECAApG,AFAAA,ACAAA,CIWeF,AHXf,AFAA,ACAA,CIWe,CHXfQ,AFAAA,ACAAA,EIWe8F,CAAA,EAAAtG,CAAA,IAAA4G,AHXf,AFAA,ACAA,CIWe,CAAA5G,CAAA,GHXfqB,AFAAA,ACAAA,CIWepB,CAAA,CAAAD,CAAA,QHXf,AFAA,ACAA,EIWe4G,CAAA,GHXftF,AFAAA,ACAAA,QCAA,AFAA,ACAA,UCAAtB,AFAAA,ACAAA,CCAA,AFAA,ACAA,CCAAC,AFAAA,ACAAA,CCAA,AFAA,ACAA,ICAAC,AFAAA,ACAAA,CCAA,AFAA,ACAA,ECAAF,AFAAA,ACAAA,CCAA,AFAA,ACAA;AIWe,ANPxD,AGJyC,AFAA,AGAzC,AFAyC,SIWemG,AHXfhF,AFAAA,ACAAA,eCAAjB,AFAAA,ACAAA,CCAA,AFAA,ACAA,MIWeD,CAAA,CHXftB,AFAAA,ACAAA,CIWekI,AHXf,AFAA,ACAA,CIWe,EHXftF,AFAAA,ACAAA,MIWerB,CAAA,KHXf,AFAA,ACAA,CCAAA,AFAAA,ACAAA,CCAA,AFAA,ACAA,IIWeD,CAAA,2BHXfR,AFAAA,ACAAA,KIWeE,EHXf,AFAA,ACAA,CCAAhB,AFAAA,ACAAA,CCAA,AFAA,ACAA,EIWe,EHXfA,AFAAA,ACAAA,CCAA,AFAA,ACAA,CIWesB,CAAA,CAAAN,AHXfhB,AFAAA,ACAAA,CCAA,AFAA,ACAA,KIWe,CAAAiB,QAAA,KAAAK,CAAA,4BAAAC,CAAA,QAAAF,CAAA,EAAA4G,CAAA,EAAAjI,CAAA,EAAAmI,CAAA,EAAAR,CAAA,OAAAS,CAAA,OAAArH,CAAA,iBAAAf,CAAA,IAAAuB,CAAA,GAAAA,CAAA,CAAAuB,IAAA,CAAAxB,CAAA,GAAA+G,IAAA,QAAAH,CAAA,QAAA1G,MAAA,CAAAD,CAAA,MAAAA,CAAA,UAAA6G,CAAA,uBAAAA,CAAA,IAAA/G,CAAA,GAAArB,CAAA,CAAA8C,IAAA,CAAAvB,CAAA,GAAA+G,IAAA,MAAAX,CAAA,CAAA7F,IAAA,CAAAT,CAAA,CAAAoB,KAAA,GAAAkF,CAAA,CAAAzF,MAAA,KAAAgG,CAAA,GAAAE,CAAA,iBAAA9G,CAAA,IAAAP,CAAA,OAAAkH,CAAA,GAAA3G,CAAA,yBAAA8G,CAAA,YAAA7G,CAAA,CAAAgH,MAAA,KAAAJ,CAAA,GAAA5G,CAAA,CAAAgH,MAAA,IAAA/G,MAAA,CAAA2G,CAAA,MAAAA,CAAA,2BAAApH,CAAA,QAAAkH,CAAA,aAAAN,CAAA;AAAA,ANNxD,AGLyC,AFAA,AGCzC,AFDyC,SIWeJ,AHXf3E,AFAAA,ACAAA,aCAArB,AFAAA,ACAAA,CCAA,AFAA,ACAA,EIWeD,AHXfA,AFAAA,ACAAA,CIWe,AHXf,AFAA,ACAA,QIWesE,KAAA,CAAAC,MHXf/E,AFAAA,ACAAA,CIWe,CAAAQ,CAAA,IHXf,AFAA,ACAA,CCAAC,AFAAA,ACAAA,CCAA,AFAA,ACAA,IIWeD,CAAA,CHXfC,AFAAA,ACAAA,CCAA,AFAA,ACAA,EIAzC,OHAyCA,AFAAA,ACAAA,CCAA,AFAA,ACAA,MCAAF,AFAAA,ACAAA,CCAA,AFAA,ACAA,GCAAE,AFAAA,ACAAA,CCAA,AFAA,ACAA,CCAAP,AFAAA,ACAAA,MCAA,AFAA,ACAA,CCAA6B,AFAAA,ACAAA,WCAA,AFAA,ACAA,kBCAAxB,AFAAA,ACAAA,CCAA,AFAA,ACAA,QCAArB,AFAAA,ACAAA,CCAA,AFAA,ACAA,GCAAqB,AFAAA,ACAAA,CCAA,AFAA,ACAA,CCAAyB,AFAAA,ACAAA,ICAA,AFAA,ACAA,CCAAvB,AFAAA,ACAAA,CCAA,AFAA,ACAA,ECAAD,AFAAA,ACAAA,CCAA,AFAA,ACAA,gCCAAR,AFAAA,ACAAA,OCAA,AFAA,ACAA,CCAAd,AFAAA,ACAAA,CCAA,AFAA,ACAA,UCAAA,AFAAA,ACAAA,CCAA,AFAA,ACAA,YCAA+C,AFAAA,ACAAA,SCAA,AFAA,ACAA,yECAAzB,AFAAA,ACAAA,CCAA,AFAA,ACAA,GCAAnC,AFAAA,ACAAA,MCAA,AFAA,ACAA,GCAAc,AFAAA,ACAAA,MCAA,AFAA,ACAA,ECAAsB,AFAAA,ACAAA,CCAA,AFAA,ACAA;AIazC,ANPA,AGJA,AFAA,AGAA,AFAA;AIYA,ANPA,AGJA,AFAA,AGAA,AFAA;AIYA,ANPA,AKRA,AFIA,AFAA,AGAA,AFAA,IGJAX,OAAA,GAAAC,OAAA;ACgBA,ANPA,AKTkD,AFKlD,AFAA,AGAA,AFAA,SGLkDC,QAAAC,CAAA,sCAAAD,OAAA,wBAAAE,MAAA,uBAAAA,MAAA,CAAAC,QAAA,aAAAF,CAAA,kBAAAA,CAAA,gBAAAA,CAAA,WAAAA,CAAA,yBAAAC,MAAA,IAAAD,CAAA,CAAAG,WAAA,KAAAF,MAAA,IAAAD,CAAA,KAAAC,MAAA,CAAAG,SAAA,qBAAAJ,CAAA,KAAAD,OAAA,CAAAC,CAAA;ACiBlD,ANPA,AKVkD,AFMlD,AFAA,AGAO,AFAP,SGNkDK,ADMlC0F,QCNkCzF,CAAA,EAAAC,CAAA,IDMlBwF,CAAEC,GCNgBxF,CAAA,ADMZ,EAAE,CCNUC,MAAA,CAAAC,IAAA,CAAAJ,CAAA,OAAAG,MAAA,CAAAE,qBAAA,QAAAX,CAAA,GAAAS,MAAA,CAAAE,qBAAA,CAAAL,CAAA,GAAAC,CAAA,KAAAP,CAAA,GAAAA,CAAA,CAAAY,MAAA,WAAAL,CAAA,WAAAE,MAAA,CAAAI,wBAAA,CAAAP,CAAA,EAAAC,CAAA,EAAAO,UAAA,OAAAN,CAAA,CAAAO,IAAA,CAAAC,KAAA,CAAAR,CAAA,EAAAR,CAAA,YAAAQ,CAAA;ACkBlD,ANPA,AKXkD,AFOlD,AFAA,ACAA,EEAE,IAAMyF,GCP0ChF,UDO7B,GAAG,CCP0BX,CAAA,ODO1C2F,MCP0C1F,CAAA,MAAAA,ADO7B0F,CCP6B,ADOzB1C,GCPyBrC,EDOpB,EAAEgF,KCPkB,CAAA/E,GDOT,EAAK,CCPI,EAAAZ,CAAA,UAAAC,CAAA,WAAAU,SAAA,CAAAX,CAAA,IAAAW,SAAA,CAAAX,CAAA,QAAAA,CAAA,OAAAF,OAAA,CAAAI,MAAA,CAAAD,CAAA,OAAAY,OAAA,WAAAb,CAAA,IAAAc,eAAA,CAAAf,CAAA,EAAAC,CAAA,EAAAC,CAAA,CAAAD,CAAA,SAAAE,MAAA,CAAAa,yBAAA,GAAAb,MAAA,CAAAc,gBAAA,CAAAjB,CAAA,EAAAG,MAAA,CAAAa,yBAAA,CAAAd,CAAA,KAAAH,OAAA,CAAAI,MAAA,CAAAD,CAAA,GAAAY,OAAA,WAAAb,CAAA,IAAAE,MAAA,CAAAe,cAAA,CAAAlB,CAAA,EAAAC,CAAA,EAAAE,MAAA,CAAAI,wBAAA,CAAAL,CAAA,EAAAD,CAAA,iBAAAD,CAAA;ALYlD,AKZkD,AFQlD,AFAA,ACAA,IEAI,IAAI,CCR0Ce,ADQzCkC,KAAK,CAAC2C,SAAS,CCR0B5F,ADQzB,CCRyB,CDQvB,CCRuBC,CAAA,EAAAC,CAAA,EDQhB,EAAE,QCRcD,CAAA,GAAAkB,cAAA,CAAAlB,CAAA,MAAAD,CAAA,GAAAG,MAAA,CAAAe,cAAA,CAAAlB,CAAA,EAAAC,CAAA,IAAAmB,KAAA,EAAAlB,CAAA,EAAAM,UAAA,MAAAa,YAAA,MAAAC,QAAA,UAAAtB,CAAA,CAAAC,CAAA,IAAAC,CAAA,EAAAF,CAAA;ACoBlD,ANPA,AKbkD,AFS3C,AFAA,ACAA,IECH,IAAI,CCV0CmB,AFSlC4C,AFAApC,ACAA4B,eGTkCrD,CAAA,EHShBqD,CAAEC,GCAEO,CAAEC,CETUrF,AJSVgD,CITU,AJSRC,ACAA,EAAEC,CGTMN,CFSJ,EAAEM,MFAM,ACAA,EDAEA,ACAA,CGTN,CAAA3B,AFSQ,CETR,CFSU,MFAM,EAAE,uBITlBT,OAAA,CAAAd,CAAA,IAAAA,CAAA,GAAAA,CAAA;ALclD,AKdkD,EFUhD,AFAA,ACAA,IECI,GCX4C4C,AFUzCyC,AFAApC,ACAA4B,CECC,KDDK,ADAA,CCAC1B,ADAAA,CECCmB,IHDI,CIV6B/C,AFU5B,AFAA4B,AGCA,AFDA,CGV4B,AFU3B,ACCA8D,AFDA,EGV2B3F,CAAA,EJUtB,CAAC,GGCG,CDDR8B,ACCS,AFDTA,GCAG,ADAA,ECAEkB,ACCS,AFDTjB,CDACD,GAAG,ACAA,CCAC,CFACC,ACAG,CCAC,CEVWvC,ADWJ,EHDP,AGCS,EHDJ,GIVM,CAAAS,CAAA,MAAAA,CAAA,SAAAA,CAAA,MAAAF,CAAA,GAAAE,CAAA,CAAAP,MAAA,CAAA6B,WAAA,kBAAAxB,CAAA,QAAArB,CAAA,GAAAqB,CAAA,CAAAyB,IAAA,CAAAvB,CAAA,EAAAD,CAAA,gCAAAR,OAAA,CAAAd,CAAA,UAAAA,CAAA,YAAA+C,SAAA,yEAAAzB,CAAA,GAAAnC,MAAA,GAAAc,MAAA,EAAAsB,CAAA;ACsBlD,ADtBkD,IFW9C,AFAA,ACAA,ICAI,AFAE+B,AGCF,AFDEA,CGXwCgE,AFWzChD,KAAK,CAACgB,ACCAhB,EHDI,ACAA,GDAG,AGCF,AFDE,CECD2C,GCZ6B3F,AJW5BtC,ACAAA,CGX4B,EAAAqC,CAAA,CFWrB,CCCC,CDDC,ACCA,CAAC+E,KAAK,CDDChD,ACCA,CCZYmE,EFWT,ACCA,CAAC,CAAClD,GHDP,AGCU,AFDV,CECW,CHDVhB,ACAAA,IDAI,ACAA,CDACE,ACAAA,CGXQ,CAAAjC,CAAA,CJWJ,AGCC+B,AFDD,CDAC,ACAA,GGXGmE,ADYC,qBCZD,CAAAlG,CAAA,EAAAD,CAAA,KAAAoG,2BAAA,CAAAnG,CAAA,EAAAD,CAAA,KAAAqG,gBAAA;ACuBlD,ANPA,AKhBkD,IFa9C,AFAA,ACAA,ICAMpE,AFAFJ,ACAAA,CGb0CwE,CDYC,ODChC,ACDoCrE,CHCrC,ACAA,CDACG,ACAAA,CCAG,CCDqC,CAAC0D,EDCtClI,EEb4B,ADYc,CHCrC,AGDsC,AFCtC,CDACsE,AGDsC,AFCtCA,SDAS,ACAA,CDAC,ACAA,EGbYP,AJaV,ACAA,MCAJ,EAACuB,CEba,IFaR,CAACgB,cAAc,CAAC;AGW1D,ANPA,AKjBkD,IFe9C,EFDE,ACAA,ECCEpC,ACH0D,CCZhBuE,CJctChE,AGFuD,AFEvDA,QCCM,AFDE,ACAA,CCCDD,EFDIH,ACAAA,IDAI,ACAA,CDACK,ACAAK,CCCD,CAACT,CFDG,GCAG,EDAE,GIdchC,AFeb,ADDE,CGdW,AFeZ,EEfYqG,AFeV,AFDE,CIdQ,EHcL,MGdKrG,CAAA,2BAAAA,CAAA,SAAAsG,iBAAA,CAAAtG,CAAA,EAAAqG,CAAA,OAAApG,CAAA,MAAAsG,QAAA,CAAA/E,IAAA,CAAAxB,CAAA,EAAAwG,KAAA,6BAAAvG,CAAA,IAAAD,CAAA,CAAAJ,WAAA,KAAAK,CAAA,GAAAD,CAAA,CAAAJ,WAAA,CAAAjC,IAAA,aAAAsC,CAAA,cAAAA,CAAA,GAAAqE,KAAA,CAAAmC,IAAA,CAAAzG,CAAA,oBAAAC,CAAA,+CAAAyG,IAAA,CAAAzG,CAAA,IAAAqG,iBAAA,CAAAtG,CAAA,EAAAqG,CAAA;ACyBlD,ANPA,AKlBkD,MFgB5C,AFDA,AGFA,AFEA,GGf4CC,CFgBxCrC,AFDA,ACAA,CDACnC,ACAAA,GDAG,ACAA,CDACE,ACAAA,ICCI,GAAG,EAAE,AFDA,ACAA,CDAC,ACAA,EGfyBhC,AJevB,ACAA,CGfuB,EAAAqG,CAAA,aAAAA,CAAA,IAAAA,CAAA,GAAArG,CAAA,CAAAY,MAAA,MAAAyF,CAAA,GAAArG,CAAA,CAAAY,MAAA,YAAAb,CAAA,MAAA4G,CAAA,GAAArC,KAAA,CAAA+B,CAAA,GAAAtG,CAAA,GAAAsG,CAAA,EAAAtG,CAAA,IAAA4G,CAAA,CAAA5G,CAAA,IAAAC,CAAA,CAAAD,CAAA,UAAA4G,CAAA;AC0BlD,ANPA,AKnBkD,MFiB5C,ACHA,EHEE7E,ACAAA,CGhB0CoE,CFiBxClD,CFDC,ACAA,CDAChB,ACAAA,CEFCgB,EDGE,CAACkB,ECHE,CAACyB,EHEE,ACAA,CDAC,ACAA,GDAG,ACAA,GEFG,CAAC,ECdqB3F,CAAA,EAAA4G,CAAA,CFiBd,EAAE,KEjBY3G,CAAA,WAAAD,CAAA,gCAAAN,MAAA,IAAAM,CAAA,CAAAN,MAAA,CAAAC,QAAA,KAAAK,CAAA,4BAAAC,CAAA,QAAAF,CAAA,EAAA4G,CAAA,EAAAjI,CAAA,EAAAmI,CAAA,EAAAR,CAAA,OAAAS,CAAA,OAAArH,CAAA,iBAAAf,CAAA,IAAAuB,CAAA,GAAAA,CAAA,CAAAuB,IAAA,CAAAxB,CAAA,GAAA+G,IAAA,QAAAH,CAAA,QAAA1G,MAAA,CAAAD,CAAA,MAAAA,CAAA,UAAA6G,CAAA,uBAAAA,CAAA,IAAA/G,CAAA,GAAArB,CAAA,CAAA8C,IAAA,CAAAvB,CAAA,GAAA+G,IAAA,MAAAX,CAAA,CAAA7F,IAAA,CAAAT,CAAA,CAAAoB,KAAA,GAAAkF,CAAA,CAAAzF,MAAA,KAAAgG,CAAA,GAAAE,CAAA,iBAAA9G,CAAA,IAAAP,CAAA,OAAAkH,CAAA,GAAA3G,CAAA,yBAAA8G,CAAA,YAAA7G,CAAA,CAAAgH,MAAA,KAAAJ,CAAA,GAAA5G,CAAA,CAAAgH,MAAA,IAAA/G,MAAA,CAAA2G,CAAA,MAAAA,CAAA,2BAAApH,CAAA,QAAAkH,CAAA,aAAAN,CAAA;ALoBlD,AKpBkD,IDe9C,CAAC,CAAC,EDGE,CElB0CJ,CJiBxC5D,ACAAA,ECCI8B,CCHDY,KAAK,EAAE,CHEC,ACAA,EDAE,ACAA,CDAC,ACAA,CGjB0B/E,CAAA,AFkBtB,GAAG,KElBmBsE,EFkBZtB,GElBY,CAAAuB,CFkBP,CAACL,KElBM,CAAAlE,CAAA,UAAAA,CAAA,EFkBc,KAAK,QAAQ,GACjEoE,IAAI,CAACC,KAAK,CAACrB,KAAK,CAACkB,oBAAoB,CAAC,GAAGlB,KAAK,CAACkB,oBAAoB;AGS/E,ANPA,AKnBA,CC0BC,KFZK,EDKE,GGOGuN,CHPCnN,AFJchC,ACAAA,CIWb,AFZA,EEYE,AFZA,CHCe,ACAA,CCIb,CAACiC,AFJcxC,ACAAA,IDAI,ACAA,CDACQ,ACAAA,ECIZ,CAAC4B,MFJoB,ACAA,QCIN,CAAC,IAAIA,cAAc,CAACvD,MAAM,GAAG,CAAC,EAAE;AHCxE,AKnBA,EC0BE,EFZE,MDKMqD,EFLsCzB,ACAAA,OCK7B,AFLoC,ACAA,EDAET,ACAAA,CCKnCoC,GFLuC,ACAA,CDACxG,ACAAA,IDAI,ACAA,MCK9B,CAACoF,GAAG,CAAC,UAAAyB,QAAQ;AHCjD,AKnBA,EC0BE,AFZA,CAAC,SDI8C,AFLmB/B,ACAAA,MDAM,ACAA,CCKrB+B,CFLuBrC,ACAAA,OCKf,CAACxE,IAAI;AHElE,AKnBA,EC0BE,AFXA,ECfIuJ,KDeGzB,CDEyD,AFLmB,ACAA,CDAC,ACAA,CCKnB,AFLoB,ACAA,CCKnBpF,ACFvD,CAAC0C,GCfK,ADeF,CAAC,CDEwD,CEjBpD,AFiBqD0B,OAAO,CAAC,ACFhEzB,KAAK,EAAK;AJK7B,EKnBEmE,EDeE,IDEI,ACFEtB,EHHAnD,ACAAA,OGZO,EAAE,CACf,EDcoB,CHHD,ACAA,EDAE,AGGDhC,AFHC,CDAC,ACAA,YEGF,KAAQsC,KAAK,CAAE;AJKvC,EMOE,ED1BIoE,ADeF,EDEE,ECFItB,EHHAnD,ACAAA,EGZI,EAAE,EJYA,ACAA,EDAER,ACAAA,IGZM,CDeC,GHHC,AGGE,AFHF,CEGG,EHHA,ACAA,CDAC,ACAA,GDAG,ACAA,CEGG,EAAE,WAAW,EAAE,OAAO,EAAE,SAAS,CAAC;ICf5CkF,ADiBtBvB,EDEE,EFNE,ACAA,CDAC,ACAA,CCMCpB,OEnB6B,EAAE,ADiBtB,CAAC7D,CDEC,GAAG,EAAE,CCFC,CAAC,UAAAkF,KAAK,EAAI;AJIrC,EMOE,AD5BgD,CAAC,EAC/C,CFmBE,AFNA,AGIAF,AFJA,CDAC,ACAA,GCMG7C,GFNG,ACAA,ECME,CAAC2B,ICFI,CAACoB,KAAK,CAAC,CDEC,EAAE,ACFAL,aAAa,CAAC1C,KAAK,EAAE+C,KAAK,CAAC;AJIzD,EMOE,ED5BIqB,ADkBF,CAAC,CAAC,EDEE,AFNAtF,ACAAA,GDAG,ACAA,CGdG,AFoBF,AFNAE,ACAAA,EGdI,OJcK,ACAA,CGdG,AJcF,ACAA,CDACK,ACAAA,WDAW,ACAA,CDAC7B,ACAAA,IDAI,ACAA,CDAC,ACAA;AFQxC,EMOE,ED7BwB6G,ADoBtB,MDCM3C,AFNApC,ACAAA,CEKCuD,GHLG,ACAA,EDAE9D,ACAAA,CGfuB,EAAE,CJerB,ACAA,CCMC,AFNAQ,ACAAA,GCMG,CCDC,GDCGqC,EFNE,ACAA,ECME,CAAC5B,KAAK,CAAC2B,YAAY,CAAC,CAACE,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AHEhF,EKvBkD,ADqBhD,CCrBiD,ADqBhD,CAAC,CCpBA,GFqBI,CAAC,CAAC,AFNAtC,ACAAA,OCMOuC,AFNA,ACAA,EDAEhD,ACAAA,GCMG,CFNC,ACAA,CCMC,AFNApE,ACAAA,IDAI,ACAA;AFQ5B,AIFA,EESE+T,ED9BItK,KC8BG,CAACuK,AHRAjN,AFNAjC,ACAAA,EGhBI,CC8BD,CAAC,AD9BE,CC+BZgP,CLfY,ACAA,CIeV,CAACG,ALfWzP,ACAAA,GIeR,AHTW,CGSV,EHTaa,CEtBG,IFsBE,CAAC2B,YAAY,OGSJ,EAAE8M,EAAE,CAACI,QAAQ,CAAC,EAChDJ,EAAE,CAACG,GAAG,CAAC,2BAA2B,EAAEH,EAAE,CAACI,QAAQ,CAAC,EAChDJ,EAAE,CAACG,GAAG,CAAC,qBAAqB,EAAEH,EAAE,CAACI,QAAQ,CAAC,EAC1CJ,EAAE,CAACG,GAAG,CAAC,uBAAuB,EAAEH,EAAE,CAACI,QAAQ,CAAC,CAC7C,CAAC,CAACC,IAAI,CAAC,UAAApJ,IAAA,EAAgD;ANX1D,IMW0D,ADnC7BrB,ICmC6BsB,AHZlD,AFNA,ACAA,CDAC,ACAA,CDAC,ACAA,GIkBgD,GAAA3C,CDnChB,EAAE,WCmCc,CAAA0C,IAAA;ANV1D,EKzByD,CAAC,EACtD,CCkCiB/G,AHXf,EFLEG,ACAAA,GDAG,ACAA,CDACE,ACAAA,MIgBqB,GAAA2G,ALhBZ,ACAA,CDAC,ACAA,CDACjG,ACAAA,GIgBU,ULhBG,ACAA,EDAE,ACAA;AFOtC,IKzBM0E,ECkC6BvE,AHT7Bf,EFNE,ACAA,CCMC,CGS8B,AHT7BE,EEzBI,AJmBFG,ACAAA,CIe2BwG,CDlCvB,ICkCuB,CHTpB,CAAC,AFNA,ACAA,EDAE7G,ACAAA,CCMC,EFNE,ACAA,CGnBG,AJmBFE,ACAAA,SDAS,ACAA,CDAC,ACAA,CDACW,ACAAA,MDAM,ACAA,EDAE,ACAA;IGnBf0E,ECkCWtD,ALdnC,ACAA,ECMEiB,IGQuC,GAAA2D,CHR/B,CE1B2B,CF0BzB3F,CE1B2B,CCkCE,GHRxB,CAACgC,QAAQ,IAAI,EAAE;AHCtC,EK3B0D,CAAC,CACxD,AJoBC,ACAA,EIa6CzB,EHPzC0B,IGO+C,GAAA0D,GHPrC,EGOqC,AHPnC3F,KAAK,CAACiC,UAAU,IAAI,CAAC;AHCzC,EKzBE,ECgCEpC,ALZA,ACAA,IIYI,AHPAqC,GGOG,ALZApD,ACAAA,GDAG,ACAA,CIYH0D,YHPgB,EAAEvB,SAAS,OGOX,EAACpB,IAAI,CAAC;ANNjC,AKzBA,EJoBE,ACAA,CDAC,ACAA,CIYC,CLZC,ACAA,CDAC,ACAA,CDAC,ACAA,CIYG0H,AHPF7F,AFLA,ACAA,OIYS,GAAG7B,CHPD,EAAE6B,CGOG,CAAC7C,MAAM,CAAC,EHPA,QGOC2I,GAAG,EAAExH,KAAK;AD/B3C,AJoBA,ACAA,MIW2C,EHNnCmC,KGMwCnC,CHNlC,EAAEA,EGMqC,CAACV,EHNjC,CAAC6C,CGMoC,GAAGqF,EHNjC,CGMoC,GAAGxH,KAAK,CAACV,IAAI,GAAGkI,GAAG;ANLnF,AKzBA,IC8BmF,GAAE7L,CHL7EyG,KGKmF,CAACqF,CHL7E,EAAEzH,KAAK,CGK+E,AHL9EoC,CGK+E;ANJtG,AKzBA,AJoBA,ACAA,IIWIvC,EHNE,CAAC,CGMC,CAAChC,OAAO,CAAC,UAAAmC,KAAK,EAAI;ANL1B,ACLA,ACAA,EGpBEsE,EFyBE,EGME,IAAItE,KAAK,CAAC+N,KD/BK,KC+BK,IAAI,ED/B5BzJ,KC+BmCtE,KAAK,CAAC+N,QD/BtBzJ,CAAA,CC+BgC,CD/B5B,IC+BiC,QAAQ,EAAEtE,KAAK,CAAC+N,UAAU,GAAG,IAAA3S,0BAAkB,EAAC4E,KAAK,CAAC+N,UAAU,EAAE/N,KAAK,CAACV,IAAI,EAAEiI,OAAO,CAAC;ANLhJ,ACLA,ACAA,IGpBI,AFyBA,EGME,ED/BIhD,EC+BAvE,CHNClB,GAAG,CGMC,CAACqD,KD/BO,CC+BD,ED/BI,CAAC,CC+BD,AD/BE,OC+BKnC,KAAK,CAACmC,MAAM,KAAK,QAAQ,EAAEnC,KAAK,CAACmC,MAAM,GAAG,IAAA/G,0BAAkB,EAAC4E,KAAK,CAACmC,MAAM,EAAEnC,KAAK,CAACV,IAAI,EAAEiI,OAAO,CAAC;ANLhI,ACLA,ACAA,ECKE,CAAC,CGMC,AD9BA,CC8BC,AHNA,CGMC,AHNA,CAAC,CExBC,AFwBA,CExBCpD,eAAe,CAACtG,OAAO,CAAC,UAAA2G,MAAM,EAAI;ALyB3C,AGAA,AFLA,ACAA,IIYI,ED/BED,EC+BI3F,UAAU,CD/BD,EC+BIiB,IAAI,CAAChB,ED/BT5D,IC+Be,CAAC,CD/BhB,CAASuJ,MAAM,CAACJ,CC+BCtF,GAAG,EAAEkB,ED/BE,CAACyE,EC+BE,EAAK,ED/BD,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGF,MAAM,CAACJ,QAAQ,CAACZ,KAAK,CAAC,CAAC,CAAC,EAAG,GAAG,CAAC;ALyB9F,ACLP,ACAA,MIYM,AD/BAe,GLwBU7J,CMON,CAACsF,KAAK,CAACrF,ED/BE,EC+BE,EAAE,ANPOD,AKxBXO,CLwBaN,IAAI,CKxBjB,CC+BWmE,ANPQ,AKxBf0F,GC+BU,GD/BJ,CAACJ,QAAQ,WAAQ,GAAG,CAAC;AFyBlD,AFLA,ACAA,EFKE,IMQI,ANRAxJ,AKxBA2J,ICgCM3J,GNRC,GAAGC,CMQG,EDhCA,CCgCGA,ENRA,CAACF,GMQK,ADhCTM,CCgCU+E,ANRF,CAAC,IMQM,ADhCf,CCgCgBrF,ADhCT6J,ICgCa,CAAC,CDhCR,CAACJ,QAAQ,CAACK,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGF,MAAM,CAACJ,QAAQ,CAACZ,KAAK,CAAC,CAAC,CAAC,EAAG,GAAG,CAAC;AFyBnG,AFLO,ACAA,EFKL,EKxBE,CAAC,CCgCC,ANRE1I,AKxBF,GJmBU8E,ACAAY,CIaJxB,SAAS,CNRC,EMQEpE,AJbK4F,CFKJ,AELMX,IAAI,CDAAD,CKaJ,ALbMC,ACAAY,CIaLvF,GLbS,EAAE4E,KCAK,CIaL,CAAC,AJbM,CIaL,CAAC3E,ENRE,KMQK,CAAC,CLbO,EAAE,WKaK,EAAE,EAAE,CAAC;AHPzE,EHAE,ACLA,ACAA,EGlBE,ECgCE,ANTEJ,GCLC8E,ACAAA,CIcC,CAACf,ADhCAyF,EJkBE,ACAA,CIcC,ALdAxE,ACAAA,CIcCb,ELdE,ACAA,CFKG,ACLF,ACAA,GFKKtE,EMSA,CAACoE,ADhCA,ILuBM,ACLZgB,ACAAA,CFKahF,IMSE,ALdV,ACAA,CIcW,ANTE,CAACF,ACLV,ACAA,GIcWkE,SAAS,CAAC4D,CNTG,CAAC,EMSA,CAAC,CAAC,KAAK,EAAE,EAAE9D,GAAG,CAACtB,IAAI,CAACwB,SAAS,CAAC;AHRlF,EHCE,AKxBA,CAAC,CJkBC,ACAA,EIcE,ANRAjE,ECNIkF,ACAAA,KIcGnB,GAAG,ENRE,EAAElE,CCNG,ACAA,GDAA8C,ACAAA,GFMI,MAAAzC,ICNJ,ACAA,EFMI,CAAMF,ECNFiF,ACAAA,KDAK,ACAA,CDAE,ACAA,IFMO,CAAC,CAAC,CAAC,OAAA/E,MAAA,CAAIF,YAAY,CAAC,CAAC,CAAC,CAAE;AGArE,EHCE,AKvBA,EC+BE,ALdA,ACAA,CIcC,EAAE,CLdGiE,ACAAA,CIcD,ANRApE,CMQC,MNRM,CAACM,ACNE,ACAA,GDAG,ACAA,IDAAR,ACAAA,IFMM,CAAC,CAAC,CAACS,OAAO,CAAC,OCNH,ACAA,EDAC6E,ACAAA,KFMgB,ACNX,ACAA,CDACrF,ACAAA,CFMY,EAAE,CAAC,ACNX,ACAA,CDAC,ACAA;AFOhD,AKvBA,AFsBA,IGUI,ALdAsF,ACAAA,IIcMQ,SLdO,ACAA,CDACP,ACAAQ,CIcG,GAAG,IAAAJ,EJdI,GAAG,GDAG,GAAG,uBKcK,EAACC,MAAM,EAAE3B,UAAU,CAAC;AD/B9D,AFsBA,IGUIiB,ELdEM,ACAAQ,EIcE,GAAG,IAAAH,IJdQ,EAAEC,KDAK,EAAEX,ICAI,CAACd,SAAS,CAAC,CIcnB,EAACa,ALdqB,ACAAY,CDACzB,GKclB,EAAEyB,ILdyB,CAAC,ACAA,CAACzB,EDAEc,GKclB,CAAC,GJdwB,CAAC,CAACT,SDAS,CAACL,CCAC,GAAG,EAAE,GDAG,CAAC,CAACK,WAAW,GAAG,EAAE;ADM1G,AKvBA,AFsBO,IGWH,ELfEe,ACAAQ,EIeId,CHXMuC,aDJM,EAAE5B,EIeI,GAAG,ALfF,EEIS4B,AFJPvC,CEISD,CGWTnB,EJfI,CCIS,ADJRM,ECIUsD,ODJD,CAAC,GDAG,ACAA7B,CDACzB,EEIU,EAAE,KFJH,CAAC,ACAA,CAACA,EDAEc,OCAO,CAAC,CAACJ,QIejB,CLf0B,CKezBf,ALf0BK,GCAG,GAAG,CAAC,EDAE,CAAC,CAACU,CKezB,EAAEd,UAAU,ALf0B,CKezB,ELf4B,CAAC;ADM9G,AKvBA,EFsBE,EGWEiB,ELfEQ,ACAAQ,EIeE,CHXChB,EGWE,EHXE,CAACE,CGWHH,AJfI,ECIE,ADJAa,CCIC,IFJI,EAAEX,IEINE,ADJU,CAAChB,ICIN,EAAI,GDJW,CAAC,GDAG,ACAAyB,CDACzB,SAAS,CAAC,ACAA,CAACA,EDAEc,CKe1B,EAACD,IAAI,AJf4B,CAAC,CIe3BC,AJf4BH,MAAM,GDAG,ACAA,CDACX,QKepB,CAAC,ALf4B,CAAC,CAACW,MAAM,GAAG;ADM/F,AKvBA,ICkCI,AHZA,AFJA,ACAA,CDAC,ACAA,GIgBKoP,AHZA9O,aAAa,GAAAvC,GGYM,GAAG,IAAAoD,GHZT,KAAQd,KAAK,CAAE,uCGYgB,EAACe,MAAM,EAAEnC,UAAU,CAAC;ANV1E,AKvBA,ICkCIiB,AHZA,AFHA,ACAA,IIeI,AHZEb,GGYC,ALfAiB,ACAAA,IIeAoC,EHZQ,GAAG,IAAA3H,AFHE,ACAA,sBCGY,EAACsF,KAAK,CAACrF,IAAI,CAAC,SGYf,EAACkF,IAAI,EAAEkP,mBAAmB,CAAC;ANV5D,EKvBEpK,AJmBA,ACAA,CDAC,ACAA,CIgBC9E,AHZAI,AFJA,ACAA,IIgBI,GAAG,IAAA6N,EDnCM,AFuBA,CAAC9L,QAAQ,EEvBxB2C,CFuB2BrC,cEvBZqC,AFuB0B,CEvBxBC,AFuByB5F,SGYZ,AHZqB,CEvBxB,AFuByB,CGYrBa,CDnCFG,CFuB0BsC,EGYpB,CAAC,CDnCF,EAAE,QFuBiC,CAACtD,SAAS,CAAC,CAACgD,QAAQ,GAAG,EAAE;AHChG,ACJA,ACAA,IIgBIgN,ADnCA,AFuBA/O,IEvBI,CAACkE,ECmCE,CAAC8K,GAAG,CAACpP,CHZC,CAACoC,EGYE,CAAC,GDnCG,CAACpE,GFuBG,GAAGyE,CEvBC,CAAC,UAAAkC,EFuBY,CAACxF,GEvBP,EAAI,IFuBY,CAAC,GAAGsD,cAAc,CAACtD,SAAS,CAAC,CAACiD,UAAU,GAAG,CAAC;AHCnG,IMaI,AHbAhC,EEvBE,ECoCIiP,EDpCE/Q,KAAK,EFuBA,CEvBG6B,AFuBFkC,KGaO,ADpCA,CAACsC,ECoCE,IAAAqB,ADpCI,CAACxB,MFuBI,GAAG/B,IEvBM,CAAC,SFuBO,CAACtD,SAAS,CAAC,GAAGsD,EGajB,EAACzC,IAAI,CAAC,KHbyB,CAACb,SAAS,CAAC,CAACkD,mBAAmB,GAAG,CAAC,CAAC;AHCtH,IMaI,AHbAjC,EEvBE,ECoCIkP,EDpCEtK,OFuBK,CAACnD,CEvBG,MCoCM,GAAG,CHbD,CEvBRzG,ECoCS0L,AHbErE,IEvBX,CAAWkC,MAAM,CAACJ,EFuBO,CAACpF,KEvBA,CAACyF,GFuBQ,CAAC,EEvBH,CAAC,AFuBKnC,CEvBJ,CAAC,CAACoC,OCoCP,EAAC7E,EDpCiB,AFuBK,CEvBJ,AFuBKb,CGanB,ADpCe,CCoCd,EDpCiBwF,KFuBU,CEvBJ,AFuBK,CEvBJJ,AFuBK1C,QEvBG,CAAC8B,EFuBO,GEvBF,AFuBK,CEvBJ,CAAC,CAAC,CAAE,AFuBI;AHCjG,IMaH,AHZA,EExBE,ECoCI0K,AHZF,CHDQ9S,CKvBJ0J,KFwBG7E,EGYI,EDpCE,CCoCC,IAAAgO,CDpCDhT,ELuBaG,CAAEC,AGCR,CAAC8G,EExBR,CAAMqC,GFwBQ,GExBF,CAACJ,CFwBM,GHDW,EAAE9I,EKvBX,CFwBM,IAAIgH,EHDU,EAAE/G,CMa1B,ADpCW,ECoCVsE,IAAI,ANb4B,CMa3B,CNb6B,CGCP,CAACb,SAAS,CAAC,EAAE;EHA7E,EMaEgQ,ENbIxT,AKtBF,AFuBAyE,IEvBI,CCmCC,CAACgP,ANbE,GMaC,ANbE1T,CMaD2S,CDnCC/P,EFuBE,CAACgE,EHDI,AKtBF,GCmCG,ANbE7G,CMaD,AHZA,CEvBC,EFuBEgH,KHDO,CKtBD,IAAI,CAACyC,GFuBG,CAAC/F,CEvBC,CAACb,KAAK,CAAC,CFuBC,CEvBC,AFuBA,CAACgE,MAAM;EHA3D,EMcE,AHbA,EHDI1G,EMcE2T,ADpCFxK,UAAU,CLsBG,AKtBFC,GLsBK,CAAC,GMcG,ANdC,EKtBD,CCoCG,ANdC,AKtBH,GLsBM,CMcJwD,ADpCElK,ELsBM,GKtBD,gCCoCa,EAAC0B,IAAI,CAAC;ENZvD,EMcE,AHbA,GHDG,CMcGsK,ADrCFvF,AFwBA,GHDGlJ,CAAC,GAAG,AGCAuE,CHDC,EAAEvE,AKvBA,CLuBC,AKvBAoJ,GLuBGtJ,CMcG,GAAG,ENdA,AKvBA,AFwBA,CExBC,AFwBA+G,CGaD0H,ANdEvO,CAAC,AKvBA,ELuBE,EAAE,GGCG,KAAK,QAAQ,IAAI4G,UGaT,EAACzC,EHbsB,CAACb,CGanB,CAAC,OHb2B,CAAC,EAAE;IGc9E,ANdA3D,EKvBE,AFwBA4E,EGaIoP,WNdS,AGCA,CGaG,AHbF9M,GGaK,ANdF9G,IMcE8O,EHbI,GAAGjI,IHDI,UGCU,CAACtD,SAAS,CAAC,CAACoD,CGalB,EAACvC,IAAI,AHboB,CGanB;ENb5C,EMeE,ADtCA,AFwBA,CExBC,CAAC,ECsCIyP,eAAe,GAAG,IAAA3D,mCAAkB,EAAC9L,IAAI,CAAC;ENblD,EMcE,ADrCA,AFwBA,IGaM0P,CNdD5T,EKvBEiJ,AFwBA3E,IHDI,CAAC5E,KKvBK,ECqCI,CHbD,EGaI,IAAAkR,CNdG,CAAC3Q,OAAO,CAAC,CAAC,CAAC,CAAC,uBMcI,EAACiE,IAAI,CAAC;ANbrD,EKvBE,AFwBA,CExBC,AFwBA,CGaC,AHbA,IGaM2P,iBAAiB,GAAG,IAAAjC,qCAAoB,EAAC1N,IAAI,CAAC;AHZxD,EEvBE;ALuBF,AKtBA,ICoCI;ANbJ,AKtBA,ICoCI;ANbJ,AKtBA,ICoCI;ANbJ,AKtBA,ICoCI;ANbJ,AKtBA,ICoCI;ANbJ,AKtBA;ALuBO,EKtBLmF,ECoCE,KNdYnJ,UKtBG,ELsBSA,CAAEC,QKtB5BkJ,KLsByC,EAAE,UKtB1BA,CAAEJ,UAAU,EAAE;ELuB/B,EMcE,ADpCA,ELsBE,CAAC9I,CKtBC,CAACqI,WLsBW,IAAI,AKtBA,CAACtG,MLsBM/B,CKtBC,CAAC,UAAA0I,CLsBW,KAAK,AKtBV,EAAI,MLsBc,EAAE,OAAO,IAAI;EACpE,IAAIzI,AKtBA,IAAM8I,KLsBG,GAAG,CAAC,AKtBE,WAAA5J,MAAA,CAAWuJ,MAAM,CAACJ,QAAQ,CAACK,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGF,MAAM,CAACJ,QAAQ,CAACZ,KAAK,CAAC,CAAC,CAAC,CAAE;ELwBlG,EMaE,ENbIxH,AKvBF,IAAM8I,MLuBM,GAAGhJ,AKvBA,MAAAb,MAAA,CLuBa,AKvBPuJ,CLuBQxJ,KAAK,AKvBP,CLuBQ,AKvBPoJ,QLuBe,AKvBP,CLuBQ,SKvBD;ELwB/C,IAAMnI,AKvBF,IAAMgJ,OAAO,CLuBC,GAAGnJ,KKvBJb,MAAA,CAASuJ,CLuBQ,CAACxJ,IKvBH,CLuBQ,AKvBPoJ,CLuBQ,OKvBA,CLuBQ,AKvBPK,CLuBQ,KKvBF,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGF,MAAM,CAACJ,QAAQ,CAACZ,KAAK,CAAC,CAAC,CAAC,CAAE;ELyB9F,EMYE,ENZExH,AKvBA4I,ULuBU,AKvBA,CAACK,GLuBGjJ,IKvBI,CAAC,GAAG4I,ELuBE,CAAC,CAAC,CAAC,EAAE7I,GKvBG,CAAC+I,KLuBK,IAAI5I,AKvBA,CAAC,GAAG,CAAC,GLuBG,AKvBA0I,CLuBC5I,SKvBS,CLuBC,AKvBA6I,CLuBC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","file":"src.e31bb0bc.js","sourceRoot":"..\\src","sourcesContent":["\r\n// /**\r\n//  * Generates the SVG element g which will contain the data visualisation.\r\n//  *\r\n//  * @param {object} margin The desired margins around the graph\r\n//  * @returns {*} The d3 Selection for the created g element\r\n//  */\r\n// export function generateG (margin) {\r\n//   return d3.select('.graph')\r\n//     .select('svg')\r\n//     .append('g')\r\n//     .attr('id', 'graph-g')\r\n//     .attr('transform',\r\n//       'translate(' + margin.left + ',' + margin.top + ')')\r\n// }\r\n\r\n// /**\r\n//  * Sets the size of the SVG canvas containing the graph.\r\n//  *\r\n//  * @param {number} width The desired width\r\n//  * @param {number} height The desired height\r\n//  */\r\n// export function setCanvasSize (width, height) {\r\n//   d3.select('#heatmap').select('svg')\r\n//     .attr('width', width)\r\n//     .attr('height', height)\r\n// }\r\n\r\n// /**\r\n//  * Appends an SVG g element which will contain the axes.\r\n//  *\r\n//  * @param {*} g The d3 Selection of the graph's g SVG element\r\n//  */\r\n// export function appendAxes (g) {\r\n//   g.append('g')\r\n//     .attr('class', 'x axis')\r\n\r\n//   g.append('g')\r\n//     .attr('class', 'y axis')\r\n// }\r\n\r\n/**\r\n * Cleans the name to avoid mismatching during the comparison of movie names\r\n *\r\n * @param {string} name The movie name to clean\r\n * @returns {string} the cleaned movie name\r\n */\r\nexport function cleanMovieName (name) {\r\n  let nameStr = String(name)\r\n  const articlePattern = /^(.+),\\s+(The|A|An)$/i\r\n  const articleMatch = nameStr.match(articlePattern)\r\n\r\n  if (articleMatch) nameStr = `${articleMatch[2]} ${articleMatch[1]}`\r\n  return nameStr.toLowerCase().replace(/[^a-z0-9\\s]/g, '')\r\n}\r\n\r\n/**\r\n * Adjusts a monetary amount for inflation based on the year difference\r\n *\r\n * @param {number} moneterayAmount The original monetary amount to adjust\r\n * @param {number} movieYear The year of the original amount\r\n * @param {number} topYear The year to adjust the amount to\r\n * @returns {number} The inflation-adjusted amount, rounded to 2 decimal places\r\n */\r\nexport function adjustForInflation (moneterayAmount, movieYear, topYear) {\r\n  const nYears = topYear - movieYear\r\n  const inflationRate = 1 + (3.3 / 100)\r\n\r\n  for (let i = 0; i < nYears; i++) {\r\n    moneterayAmount *= inflationRate\r\n  }\r\n\r\n  return Number(moneterayAmount.toFixed(2))\r\n}\r\n\r\n/**\r\n * Parses a runtime string into total minutes\r\n *\r\n * @param {string} runtimeString A string representing the runtime in hours and/or minutes\r\n * @returns {number|null} The total runtime in minutes, or null if invalid input\r\n */\r\nexport function parseRuntime (runtimeString) {\r\n  if (!runtimeString || typeof runtimeString !== 'string') return null\r\n  let totalMins = 0\r\n\r\n  const hoursMatch = runtimeString.match(/(\\d+)h/)\r\n  const minutesMatch = runtimeString.match(/(\\d+)m/)\r\n\r\n  if (hoursMatch && hoursMatch[1]) totalMins += parseInt(hoursMatch[1], 10) * 60\r\n  if (minutesMatch && minutesMatch[1]) totalMins += parseInt(minutesMatch[1], 10)\r\n\r\n  return totalMins > 0 ? totalMins : null\r\n}\r\n\r\nexport const stopWords = new Set([\r\n  'about', 'after', 'again', 'against', 'all', 'also', 'and', 'any', 'are', 'because',\r\n  'been', 'before', 'being', 'between', 'both', 'but', 'can', 'cant', 'could', 'did', 'does',\r\n  'doing', 'dont', 'down', 'during', 'each', 'few', 'for', 'from', 'further', 'had', 'has',\r\n  'have', 'having', 'his', 'here', 'how', 'into', 'its', 'just', 'more', 'most', 'not', 'now', 'off',\r\n  'once', 'only', 'other', 'over', 'same', 'should', 'some', 'such', 'than', 'that',\r\n  'the', 'their', 'them', 'then', 'there', 'theres', 'these', 'they', 'this', 'those', 'through',\r\n  'too', 'under', 'until', 'very', 'was', 'were', 'what', 'when', 'where', 'which',\r\n  'while', 'who', 'whom', 'why', 'will', 'with', 'would', 'your'\r\n])\r\n","import { cleanMovieName } from './helper'\r\n\r\n/**\r\n * Gets the data for golden globes nominations for all the movies in the top 250 in IMDB\r\n *\r\n * @param {object[]} goldenGlobes The golden globes data to analyze\r\n * @param {object[]} movieNames The names of the top 250 movies on IMDB\r\n * @returns {object} The golden globes data of the top 250 movies on IMDB\r\n */\r\nexport function getGoldenGlobesMovieData (goldenGlobes, movieNames) {\r\n  return goldenGlobes.reduce((acc, item) => {\r\n    const cleanName = cleanMovieName(item.film)\r\n\r\n    if (movieNames.includes(cleanName)) {\r\n      const isWinner = item.win === 'True'\r\n      if (!acc[cleanName]) {\r\n        acc[cleanName] = {\r\n          nominations: [{ year: item.year_film, nominee: item.name, winner: isWinner }],\r\n          nbNominations: 1,\r\n          nbWins: isWinner ? 1 : 0\r\n        }\r\n      } else {\r\n        acc[cleanName].nominations.push({\r\n          year: item.year_film,\r\n          nominee: item.name,\r\n          winner: isWinner\r\n        })\r\n\r\n        acc[cleanName].nbNominations++\r\n        if (isWinner) acc[cleanName].nbWins++\r\n      }\r\n    }\r\n\r\n    return acc\r\n  }, {})\r\n}\r\n\r\n/**\r\n * Add the data collected from the golden globes awards to the imdb data\r\n *\r\n * @param {object[]} imdb The data of the top 250 movies on IMDB\r\n * @param {object} goldenGlobesMovies The golden globes data of the movies in the top 250 on IMDB\r\n * @returns {object} The imdb data concatenated with the golden globes data\r\n */\r\nexport function addGoldenGlobesData (imdb, goldenGlobesMovies) {\r\n  return imdb.map(movie => {\r\n    const enhancedMovie = { ...movie }\r\n    const cleanName = cleanMovieName(movie.name)\r\n\r\n    enhancedMovie.goldenGlobesData = {\r\n      goldenGlobesNominees: goldenGlobesMovies[cleanName] ? goldenGlobesMovies[cleanName].nominations : [],\r\n      goldenGlobesNominations: goldenGlobesMovies[cleanName] ? goldenGlobesMovies[cleanName].nbNominations : 0,\r\n      goldenGlobesWins: goldenGlobesMovies[cleanName] ? goldenGlobesMovies[cleanName].nbWins : 0\r\n    }\r\n\r\n    return enhancedMovie\r\n  })\r\n}\r\n","import { cleanMovieName } from './helper'\r\n\r\n/**\r\n * Gets the data for oscar nominations for all the movies in the top 250 in IMDB\r\n *\r\n * @param {object[]} oscars The oscars data to analyze\r\n * @param {string[]} movieNames The names of the top 250 movies on IMDB\r\n * @returns {object} The oscars data of the top 250 movies on IMDB\r\n */\r\nexport function getOscarsMovieData (oscars, movieNames) {\r\n  return oscars.reduce((acc, item) => {\r\n    const cleanName = cleanMovieName(item.film)\r\n\r\n    if (movieNames.includes(cleanName)) {\r\n      const isWinner = item.winner === 'True'\r\n      if (!acc[cleanName]) {\r\n        acc[cleanName] = {\r\n          nominations: [{ year: item.year_film, nominee: item.name, winner: isWinner }],\r\n          nbNominations: 1,\r\n          nbWins: isWinner ? 1 : 0\r\n        }\r\n      } else {\r\n        acc[cleanName].nominations.push({\r\n          year: item.year_film,\r\n          nominee: item.name,\r\n          winner: isWinner\r\n        })\r\n\r\n        acc[cleanName].nbNominations++\r\n        if (isWinner) acc[cleanName].nbWins++\r\n      }\r\n    }\r\n\r\n    return acc\r\n  }, {})\r\n}\r\n\r\n/**\r\n * Add the data collected from the oscars awards to the imdb data\r\n *\r\n * @param {object[]} imdb The data of the top 250 movies on IMDB\r\n * @param {object} oscarMovies The oscars data of the movies in the top 250 on IMDB\r\n * @returns {object} The imdb data concatenated with the oscars data\r\n */\r\nexport function addOscarsData (imdb, oscarMovies) {\r\n  return imdb.map(movie => {\r\n    const enhancedMovie = { ...movie }\r\n    const cleanName = cleanMovieName(movie.name)\r\n\r\n    enhancedMovie.oscarsData = {\r\n      oscarNominees: oscarMovies[cleanName] ? oscarMovies[cleanName].nominations : [],\r\n      oscarNominations: oscarMovies[cleanName] ? oscarMovies[cleanName].nbNominations : 0,\r\n      oscarWins: oscarMovies[cleanName] ? oscarMovies[cleanName].nbWins : 0\r\n    }\r\n\r\n    return enhancedMovie\r\n  })\r\n}\r\n","import { cleanMovieName } from './helper'\r\n\r\n/**\r\n * Gets the additional data required for all the movies in the top 250 in IMDB\r\n *\r\n * @param {object[]} movies The additional movie data to analyze\r\n * @param {object[]} movieNames The names of the top 250 movies on IMDB\r\n * @returns {object} The additonal movie data of the top 250 movies on IMDB\r\n */\r\nexport function getAdditionalMovieData (movies, movieNames) {\r\n  return movies.reduce((acc, movie) => {\r\n    if (!movie.original_title) return acc\r\n\r\n    const cleanName = cleanMovieName(movie.original_title)\r\n\r\n    if (movieNames.includes(cleanName)) {\r\n      let companies = []\r\n      if (movie.production_companies) {\r\n        const pCompaniesData = typeof movie.production_companies === 'string'\r\n          ? JSON.parse(movie.production_companies) : movie.production_companies\r\n\r\n        if (Array.isArray(pCompaniesData) && pCompaniesData.length > 0) {\r\n          companies = pCompaniesData.map(pCompany => pCompany.name).filter(Boolean)\r\n        }\r\n      }\r\n\r\n      let releaseDate = ''\r\n      if (movie.release_date) {\r\n        try {\r\n          releaseDate = new Date(movie.release_date).toISOString().split('T')[0]\r\n        } catch (error) {\r\n          releaseDate = movie.release_date\r\n        }\r\n      }\r\n\r\n      acc[cleanName] = {\r\n        keywords: movie.keywords || '',\r\n        popularity: movie.popularity || 0,\r\n        productionCompanies: companies,\r\n        releaseDate: releaseDate,\r\n        budget: movie.budget,\r\n        revenue: movie.revenue\r\n      }\r\n    }\r\n    return acc\r\n  }, {})\r\n}\r\n\r\n/**\r\n * Add the additional movie data to the imdb data\r\n *\r\n * @param {object[]} imdb The data of the top 250 movies on IMDB\r\n * @param {object} additionalData The additional data of the movies in the top 250 on IMDB\r\n * @returns {object} The imdb data concatenated with the oscars data\r\n */\r\nexport function addAdditionalMovieData (imdb, additionalData) {\r\n  return imdb.map(movie => {\r\n    const enhancedMovie = { ...movie }\r\n    const cleanName = cleanMovieName(movie.name)\r\n\r\n    enhancedMovie.keywords = additionalData[cleanName] ? additionalData[cleanName].keywords : []\r\n    enhancedMovie.popularity = additionalData[cleanName] ? additionalData[cleanName].popularity : 0\r\n    enhancedMovie.productionCompanies = additionalData[cleanName] ? additionalData[cleanName].productionCompanies : {}\r\n    enhancedMovie.releaseDate = additionalData[cleanName] ? additionalData[cleanName].releaseDate : null\r\n\r\n    if (typeof enhancedMovie.budget === 'string' && additionalData[cleanName]) {\r\n      enhancedMovie.budget = additionalData[cleanName].budget\r\n    }\r\n\r\n    if (typeof enhancedMovie.boxOffice === 'string' && additionalData[cleanName]) {\r\n      enhancedMovie.boxOffice = additionalData[cleanName].revenue\r\n    }\r\n\r\n    return enhancedMovie\r\n  })\r\n}\r\n","/**\r\n * Fix the field values in order to proceed with processing\r\n *\r\n * @param {object[]} data The top 250 movies on IMDB\r\n * @returns {object} The correct value types for all the various fields of the data\r\n */\r\nexport function processMovieData (data) {\r\n  const stringToArray = (movie, fieldName) => {\r\n    if (!movie[fieldName]) return []\r\n\r\n    try {\r\n      if (typeof movie[fieldName] === 'string') {\r\n        return movie[fieldName].split(',').map(item => item.trim())\r\n      }\r\n      return movie[fieldName]\r\n    } catch (error) {\r\n      return []\r\n    }\r\n  }\r\n\r\n  return data.map((movie) => {\r\n    const processedMovie = { ...movie }\r\n    const fieldsToProcess = ['casts', 'directors', 'genre', 'writers']\r\n\r\n    fieldsToProcess.forEach(field => {\r\n      processedMovie[field] = stringToArray(movie, field)\r\n    })\r\n\r\n    return processedMovie\r\n  })\r\n}\r\n","import { stopWords, parseRuntime } from './helper'\r\n\r\n/**\r\n * Helper functions for metrics calculations (averages, quantity, etc)\r\n */\r\nconst MetricsHelper = {\r\n  standardMetrics: [\r\n    { property: 'rating', movieProperty: 'rating' },\r\n    { property: 'budget', movieProperty: 'budget' },\r\n    { property: 'boxOffice', movieProperty: 'box_office' },\r\n    { property: 'popularity', movieProperty: 'popularity' }\r\n  ],\r\n\r\n  /**\r\n   * Creates an object with new metrics with initialized properties for current standard metrics\r\n   *\r\n   * @returns {object} An object with total value and count properties for each of the standard metrics\r\n   */\r\n  createMetricsObject () {\r\n    const metricsObject = {}\r\n\r\n    this.standardMetrics.forEach(metric => {\r\n      metricsObject[`total${metric.property.charAt(0).toUpperCase() + metric.property.slice(1)}`] = 0\r\n      metricsObject[`${metric.property}Count`] = 0\r\n      metricsObject[`avg${metric.property.charAt(0).toUpperCase() + metric.property.slice(1)}`] = 0\r\n    })\r\n\r\n    return metricsObject\r\n  },\r\n\r\n  /**\r\n   * Adds the new metrics of a movie to an existing object\r\n   *\r\n   * @param {object} currObject The current object to which we will be adding the new metrics to\r\n   * @param {object} movie The movie object which contains the metric values required\r\n   * @returns {object} The updated current object with the new metrics\r\n   */\r\n  addMovieMetrics (currObject, movie) {\r\n    this.standardMetrics.forEach(metric => {\r\n      const value = movie[metric.movieProperty]\r\n      const totalProp = `total${metric.property.charAt(0).toUpperCase() + metric.property.slice(1)}`\r\n      const countProp = `${metric.property}Count`\r\n\r\n      if (typeof value === 'number' && !isNaN(value)) {\r\n        currObject[totalProp] += value\r\n        currObject[countProp]++\r\n      }\r\n    })\r\n\r\n    return currObject\r\n  },\r\n\r\n  /**\r\n   * Calculates the average values for all standard metrics of a given metrics object\r\n   *\r\n   * @param {object} currObject The metrics object to which we need to calculate the averages of the standard\r\n   * metrics for\r\n   * @returns {object} The metrics object with the calculated averages added to it\r\n   */\r\n  calculateAverages (currObject) {\r\n    this.standardMetrics.forEach(metric => {\r\n      const totalProp = `total${metric.property.charAt(0).toUpperCase() + metric.property.slice(1)}`\r\n      const countProp = `${metric.property}Count`\r\n      const avgProp = `avg${metric.property.charAt(0).toUpperCase() + metric.property.slice(1)}`\r\n\r\n      currObject[avgProp] = currObject[countProp] > 0 ? currObject[totalProp] / currObject[countProp] : 0\r\n    })\r\n\r\n    return currObject\r\n  },\r\n\r\n  /**\r\n   * Removes the temporary calculation properties, such as the total and count, from the current object\r\n   *\r\n   * @param {object} currObject The current object on which to remove the additional metrics\r\n   * @returns {object} The current cleaned metrics object\r\n   */\r\n  cleanupMetricsProperties (currObject) {\r\n    this.standardMetrics.forEach(metric => {\r\n      const totalProp = `total${metric.property.charAt(0).toUpperCase() + metric.property.slice(1)}`\r\n      const countProp = `${metric.property}Count`\r\n\r\n      delete currObject[totalProp]\r\n      delete currObject[countProp]\r\n    })\r\n\r\n    return currObject\r\n  },\r\n\r\n  /**\r\n   * Finds the most popular genre from an array of genres\r\n   *\r\n   * @param {string[]} genres Array of genre names\r\n   * @returns {object|null} Object containing most popular genre and counts\r\n   */\r\n  findMostPopularGenre (genres) {\r\n    if (!genres || !genres.length) return null\r\n\r\n    const genreCounts = {}\r\n    genres.forEach(genre => {\r\n      if (genre && genre.trim()) {\r\n        genreCounts[genre.trim()] = (genreCounts[genre.trim()] || 0) + 1\r\n      }\r\n    })\r\n\r\n    let maxCount = 0\r\n    let mostPopularGenre = null\r\n\r\n    Object.entries(genreCounts).forEach(([genre, count]) => {\r\n      if (count > maxCount) {\r\n        maxCount = count\r\n        mostPopularGenre = genre\r\n      }\r\n    })\r\n\r\n    return { mostPopularGenre, genreCounts }\r\n  }\r\n}\r\n\r\n/**\r\n * Gets important movie data associated to each contributor of the top 250 movies on IMDB\r\n * with additional statistics\r\n *\r\n * @param {object[]} movies The data of the movies\r\n * @returns {object} The casts, directors, and writers associated to the top 250 movies on IMDB\r\n */\r\nexport function getFilmContributorsData (movies) {\r\n  const contributors = {\r\n    casts: {},\r\n    directors: {},\r\n    writers: {}\r\n  }\r\n\r\n  const contributorCategories = {\r\n    casts: 'casts',\r\n    directors: 'directors',\r\n    writers: 'writers'\r\n  }\r\n\r\n  const createContributorObject = () => {\r\n    return {\r\n      movies: [],\r\n      nMovies: 0,\r\n      ...MetricsHelper.createMetricsObject()\r\n    }\r\n  }\r\n\r\n  movies.forEach(movie => {\r\n    const movieInfo = {\r\n      name: movie.name,\r\n      genre: movie.genre || []\r\n    }\r\n\r\n    Object.entries(contributorCategories).forEach(([movieProperty, categoryName]) => {\r\n      if (movie[movieProperty]) {\r\n        movie[movieProperty].forEach(person => {\r\n          if (!contributors[categoryName][person]) {\r\n            contributors[categoryName][person] = createContributorObject()\r\n          }\r\n\r\n          contributors[categoryName][person].movies.push({ ...movieInfo })\r\n          contributors[categoryName][person].nMovies = contributors[categoryName][person].movies.length\r\n\r\n          MetricsHelper.addMovieMetrics(contributors[categoryName][person], movie)\r\n        })\r\n      }\r\n    })\r\n  })\r\n\r\n  Object.keys(contributors).forEach(category => {\r\n    Object.keys(contributors[category]).forEach(person => {\r\n      const data = contributors[category][person]\r\n\r\n      MetricsHelper.calculateAverages(data)\r\n      MetricsHelper.cleanupMetricsProperties(data)\r\n    })\r\n  })\r\n\r\n  return contributors\r\n}\r\n\r\n/**\r\n * Analyzes genre data for movies across different time periods\r\n *\r\n * @param {object[]} movies Array of movie objects\r\n * @returns {object[]} Array of interval objects by a set of years with genre and movie analysis\r\n */\r\nexport function getGenreDataIntervals (movies) {\r\n  const decades = createYearIntervals(movies)\r\n\r\n  decades.forEach(decade => {\r\n    if (!decade.movies.length) {\r\n      decade.mostCommonGenre = null\r\n      decade.genreCounts = {}\r\n      return\r\n    }\r\n\r\n    const allGenres = []\r\n    decade.movies.forEach(movie => {\r\n      if (movie.genre && Array.isArray(movie.genre)) {\r\n        movie.genre.forEach(genre => {\r\n          if (genre && genre.trim()) allGenres.push(genre.trim())\r\n        })\r\n      }\r\n    })\r\n\r\n    const { mostPopularGenre, genreCounts } = MetricsHelper.findMostPopularGenre(allGenres)\r\n    decade.mostCommonGenre = mostPopularGenre\r\n    decade.genreCounts = genreCounts\r\n  })\r\n\r\n  return decades\r\n}\r\n\r\n/**\r\n * Creates time intervals for movies based on their release years\r\n *\r\n * @param {object[]} movies Array of movie objects\r\n * @param {number} intervalSize Size of each interval in years (10 by default)\r\n * @returns {object[]} Array of interval objects with movies and their metrics\r\n */\r\nexport function createYearIntervals (movies, intervalSize = 10) {\r\n  const minYear = movies.reduce((min, movie) => movie.year < min ? movie.year : min, Number.MAX_VALUE)\r\n  const maxYear = movies.reduce((max, movie) => movie.year > max ? movie.year : max, Number.MIN_VALUE)\r\n\r\n  const firstDecade = Math.floor(minYear / intervalSize) * intervalSize\r\n  const lastDecade = Math.floor(maxYear / intervalSize) * intervalSize\r\n\r\n  const intervals = []\r\n  for (let decade = firstDecade; decade <= lastDecade; decade += intervalSize) {\r\n    const decadeYears = decade + (intervalSize - 1)\r\n    intervals.push({\r\n      startYear: decade,\r\n      endYear: decadeYears,\r\n      label: `${decade}s`,\r\n      movies: [],\r\n      nMovies: 0,\r\n      genreCounts: {},\r\n      ...MetricsHelper.createMetricsObject()\r\n    })\r\n  }\r\n\r\n  movies.forEach(movie => {\r\n    const interval = intervals.find(interval => movie.year >= interval.startYear && movie.year <= interval.endYear)\r\n    if (!interval) return\r\n\r\n    interval.movies.push(movie)\r\n    interval.nMovies++\r\n\r\n    MetricsHelper.addMovieMetrics(interval, movie)\r\n  })\r\n\r\n  intervals.forEach(interval => {\r\n    MetricsHelper.calculateAverages(interval)\r\n    MetricsHelper.cleanupMetricsProperties(interval)\r\n  })\r\n\r\n  return intervals\r\n}\r\n\r\n/**\r\n * Gets the top collaborations for actor/director and actor/actor collaborations\r\n *\r\n * @param {Array} movies Array of movie objects\r\n * @param {number} limit Number of top collaborations to return (20 by default)\r\n * @returns {object} Object with the top actor/director and actor/actor collaborations\r\n */\r\nexport function getTopCollaborations (movies, limit = 20) {\r\n  const allCollabs = countCollaborations(movies)\r\n\r\n  return {\r\n    topActorDirectorCollabs: allCollabs.actorDirectorCollabs.slice(0, limit),\r\n    topActorActorCollabs: allCollabs.actorActorCollabs.slice(0, limit)\r\n  }\r\n}\r\n\r\n/**\r\n * Counts the amount of collaborations between actors and directors, and also between actors themselves\r\n *\r\n * @param {Array} movies Array of movie objects with casts and directors properties\r\n * @returns {object} Object containing actorDirectorCollabs and actorActorCollabs\r\n */\r\nfunction countCollaborations (movies) {\r\n  const actorDirectorCollabs = {}\r\n  const actorActorCollabs = {}\r\n\r\n  const createCollabObject = (isSameType, participant1, participant2) => {\r\n    return {\r\n      [isSameType ? 'actor1' : 'actor']: participant1,\r\n      [isSameType ? 'actor2' : 'director']: participant2,\r\n      movies: [],\r\n      genres: [],\r\n      mostPopularGenre: null,\r\n      count: 0,\r\n      ...MetricsHelper.createMetricsObject()\r\n    }\r\n  }\r\n\r\n  const addMovieToCollab = (collab, movie) => {\r\n    if (collab.movies.includes(movie.name)) return\r\n\r\n    collab.count++\r\n    collab.movies.push(movie.name)\r\n\r\n    MetricsHelper.addMovieMetrics(collab, movie)\r\n\r\n    if (movie.genre) {\r\n      const genres = Array.isArray(movie.genre) ? movie.genre : [movie.genre]\r\n      genres.forEach(genre => {\r\n        if (genre && genre.trim()) collab.genres.push(genre.trim())\r\n      })\r\n    }\r\n  }\r\n\r\n  movies.forEach(movie => {\r\n    const castMembers = movie.casts || []\r\n    const directors = movie.directors || []\r\n\r\n    castMembers.forEach(actor => {\r\n      if (!actor) return\r\n\r\n      directors.forEach(director => {\r\n        if (!director) return\r\n\r\n        const key = `${actor}/${director}`\r\n\r\n        if (!actorDirectorCollabs[key]) {\r\n          actorDirectorCollabs[key] = createCollabObject(false, actor, director)\r\n        }\r\n\r\n        addMovieToCollab(actorDirectorCollabs[key], movie)\r\n      })\r\n    })\r\n\r\n    for (let i = 0; i < castMembers.length; i++) {\r\n      const actor1 = castMembers[i]\r\n      if (!actor1) continue\r\n\r\n      for (let j = i + 1; j < castMembers.length; j++) {\r\n        const actor2 = castMembers[j]\r\n        if (!actor2) continue\r\n\r\n        const actorPair = [actor1, actor2].sort()\r\n        const key = `${actorPair[0]}/${actorPair[1]}`\r\n\r\n        if (!actorActorCollabs[key]) {\r\n          actorActorCollabs[key] = createCollabObject(true, actorPair[0], actorPair[1])\r\n        }\r\n\r\n        addMovieToCollab(actorActorCollabs[key], movie)\r\n      }\r\n    }\r\n  })\r\n\r\n  const finalizeCollabs = collabs => {\r\n    return Object.values(collabs).map(collab => {\r\n      MetricsHelper.calculateAverages(collab)\r\n\r\n      if (collab.genres.length) {\r\n        const { mostPopularGenre } = MetricsHelper.findMostPopularGenre(collab.genres)\r\n        collab.mostPopularGenre = mostPopularGenre\r\n      }\r\n\r\n      MetricsHelper.cleanupMetricsProperties(collab)\r\n      delete collab.genres\r\n\r\n      return collab\r\n    }).sort((a, b) => b.count - a.count)\r\n  }\r\n\r\n  return {\r\n    actorDirectorCollabs: finalizeCollabs(actorDirectorCollabs),\r\n    actorActorCollabs: finalizeCollabs(actorActorCollabs)\r\n  }\r\n}\r\n\r\n/**\r\n * Analyzes the movie data by the available certificate ratings\r\n *\r\n * @param {object[]} movies Array of movie objects\r\n * @returns {object} Object with certificate data and associated metrics\r\n */\r\nexport function getCertificateData (movies) {\r\n  const createCertificateObject = () => {\r\n    return {\r\n      movies: [],\r\n      count: 0,\r\n      genres: [],\r\n      mostPopularGenre: null,\r\n      ...MetricsHelper.createMetricsObject()\r\n    }\r\n  }\r\n\r\n  const certificateData = movies.reduce((certificateList, movie) => {\r\n    const certificate = typeof movie.certificate === 'string' ? movie.certificate.toLowerCase() : 'unknown'\r\n\r\n    if (!certificateList[certificate]) certificateList[certificate] = createCertificateObject()\r\n\r\n    certificateList[certificate].movies.push({ name: movie.name })\r\n    certificateList[certificate].count++\r\n\r\n    MetricsHelper.addMovieMetrics(certificateList[certificate], movie)\r\n\r\n    if (movie.genre) {\r\n      const genres = Array.isArray(movie.genre) ? movie.genre : [movie.genre]\r\n      genres.forEach(genre => {\r\n        if (genre && genre.trim()) certificateList[certificate].genres.push(genre.trim())\r\n      })\r\n    }\r\n\r\n    return certificateList\r\n  }, {})\r\n\r\n  Object.keys(certificateData).forEach(certificate => {\r\n    const data = certificateData[certificate]\r\n    MetricsHelper.calculateAverages(data)\r\n\r\n    if (data.genres.length) {\r\n      const { mostPopularGenre, genreCounts } = MetricsHelper.findMostPopularGenre(data.genres)\r\n      data.mostPopularGenre = mostPopularGenre\r\n      data.genreCounts = genreCounts\r\n    }\r\n\r\n    MetricsHelper.cleanupMetricsProperties(data)\r\n    delete data.genres\r\n  })\r\n\r\n  return certificateData\r\n}\r\n\r\n/**\r\n * Groups the movie data by seasons (summer, fall, winter, spring) based on release dates\r\n *\r\n * @param {object[]} movies Array of movie objects\r\n * @returns {object} Object with movie data organized by season and their associated metrics\r\n */\r\nexport function getDataBySeason (movies) {\r\n  const createSeasonObject = (beginDate, endDate) => ({\r\n    beginDate,\r\n    endDate,\r\n    movies: [],\r\n    count: 0,\r\n    genres: [],\r\n    mostPopularGenre: null,\r\n    ...MetricsHelper.createMetricsObject()\r\n  })\r\n\r\n  const seasons = {\r\n    spring: createSeasonObject('03-20', '06-20'),\r\n    summer: createSeasonObject('06-21', '09-22'),\r\n    fall: createSeasonObject('09-23', '12-20'),\r\n    winter: createSeasonObject('12-21', '03-19')\r\n  }\r\n\r\n  const getSeason = (dateString) => {\r\n    if (!dateString || typeof dateString !== 'string') return null\r\n\r\n    // Reason : We need to split the string, however year is not required for use\r\n    // eslint-disable-next-line no-unused-vars\r\n    const [year, month, day] = dateString.split('-').map(num => parseInt(num, 10))\r\n    const monthDay = `${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`\r\n\r\n    if (monthDay >= '03-20' && monthDay <= '06-20') return 'spring'\r\n    else if (monthDay >= '06-21' && monthDay <= '09-22') return 'summer'\r\n    else if (monthDay >= '09-23' && monthDay <= '12-20') return 'fall'\r\n    else return 'winter'\r\n  }\r\n\r\n  movies.forEach(movie => {\r\n    const season = getSeason(movie.releaseDate)\r\n    if (season === null) return\r\n\r\n    seasons[season].movies.push(movie)\r\n    seasons[season].count++\r\n\r\n    MetricsHelper.addMovieMetrics(seasons[season], movie)\r\n\r\n    if (movie.genre) {\r\n      const genres = Array.isArray(movie.genre) ? movie.genre : [movie.genre]\r\n      genres.forEach(genre => {\r\n        if (genre && genre.trim()) seasons[season].genres.push(genre.trim())\r\n      })\r\n    }\r\n  })\r\n\r\n  Object.keys(seasons).forEach(season => {\r\n    const data = seasons[season]\r\n    MetricsHelper.calculateAverages(data)\r\n\r\n    if (data.genres.length) {\r\n      const { mostPopularGenre, genreCounts } = MetricsHelper.findMostPopularGenre(data.genres)\r\n      data.mostPopularGenre = mostPopularGenre\r\n      data.genreCounts = genreCounts\r\n    }\r\n\r\n    MetricsHelper.cleanupMetricsProperties(data)\r\n    delete data.genres\r\n  })\r\n\r\n  return seasons\r\n}\r\n\r\n/**\r\n * Groups and analyzes movies by given runtime length intervals\r\n *\r\n * @param {object[]} movies Array of movie objects\r\n * @param {number} intervalSize Size of each runtime interval in minutes (10 by default)\r\n * @returns {object[]} Array of runtime interval objects with their associated movies and metrics\r\n */\r\nexport function getMovieLengthData (movies, intervalSize = 10) {\r\n  let minRuntime = Number.MAX_VALUE\r\n  let maxRuntime = 0\r\n\r\n  movies.forEach(movie => {\r\n    const runtime = parseRuntime(movie.run_time)\r\n    if (runtime) {\r\n      minRuntime = Math.min(minRuntime, runtime)\r\n      maxRuntime = Math.max(maxRuntime, runtime)\r\n    }\r\n  })\r\n\r\n  const firstInterval = Math.floor(minRuntime / intervalSize) * intervalSize\r\n  const lastInterval = Math.floor(maxRuntime / intervalSize) * intervalSize\r\n\r\n  const intervals = []\r\n  for (let minutes = firstInterval; minutes <= lastInterval; minutes += intervalSize) {\r\n    intervals.push({\r\n      startMinutes: minutes,\r\n      endMinutes: minutes + (intervalSize - 1),\r\n      label: `${minutes}s`,\r\n      movies: [],\r\n      nMovies: 0,\r\n      genres: [],\r\n      ...MetricsHelper.createMetricsObject()\r\n    })\r\n  }\r\n\r\n  movies.forEach(movie => {\r\n    const movieRuntime = parseRuntime(movie.run_time)\r\n    const interval = intervals.find(interval => movieRuntime >= interval.startMinutes && movieRuntime <= interval.endMinutes)\r\n    if (!interval) return\r\n\r\n    interval.movies.push(movie)\r\n    interval.nMovies++\r\n\r\n    MetricsHelper.addMovieMetrics(interval, movie)\r\n\r\n    if (movie.genre) {\r\n      const genres = Array.isArray(movie.genre) ? movie.genre : [movie.genre]\r\n      genres.forEach(genre => {\r\n        if (genre && genre.trim()) interval.genres.push(genre.trim())\r\n      })\r\n    }\r\n  })\r\n\r\n  intervals.forEach(interval => {\r\n    MetricsHelper.calculateAverages(interval)\r\n\r\n    if (interval.genres.length) {\r\n      const { mostPopularGenre, genreCounts } = MetricsHelper.findMostPopularGenre(interval.genres)\r\n      interval.mostPopularGenre = mostPopularGenre\r\n      interval.genreCounts = genreCounts\r\n    }\r\n\r\n    MetricsHelper.cleanupMetricsProperties(interval)\r\n    delete interval.genres\r\n  })\r\n\r\n  return intervals\r\n}\r\n\r\n/**\r\n * Analyzes the frequency of appearance for words and associated data in movie taglines\r\n *\r\n * @param {object[]} movies Array of movie objects\r\n * @param {number} minWordLength Minimum length of words to include (3 by default)\r\n * @param {number} minOccurrences Minimum occurrences of words to include (2 by default)\r\n * @returns {object[]} Array of word objects with associated movie data and their metrics\r\n */\r\nexport function getTaglineWordsData (movies, minWordLength = 3, minOccurrences = 2) {\r\n  const createWordObject = () => {\r\n    return {\r\n      movies: [],\r\n      count: 0,\r\n      genres: [],\r\n      mostPopularGenre: null,\r\n      ...MetricsHelper.createMetricsObject()\r\n    }\r\n  }\r\n\r\n  const wordCounts = {}\r\n  movies.forEach(movie => {\r\n    if (!movie.tagline || typeof movie.tagline !== 'string') return\r\n\r\n    const words = movie.tagline\r\n      .toLowerCase()\r\n      .replace(/[^\\w\\s]/g, '')\r\n      .split(/\\s+/)\r\n      .filter(word =>\r\n        word.length >= minWordLength &&\r\n        !stopWords.has(word)\r\n      )\r\n\r\n    words.forEach(word => {\r\n      if (!wordCounts[word]) wordCounts[word] = 0\r\n      wordCounts[word]++\r\n    })\r\n  })\r\n\r\n  const significantWords = Object.keys(wordCounts)\r\n    .filter(word => wordCounts[word] >= minOccurrences)\r\n\r\n  const wordData = {}\r\n  significantWords.forEach(word => {\r\n    wordData[word] = createWordObject()\r\n  })\r\n\r\n  movies.forEach(movie => {\r\n    if (!movie.tagline || typeof movie.tagline !== 'string') return\r\n\r\n    const movieWords = new Set(\r\n      movie.tagline\r\n        .toLowerCase()\r\n        .replace(/[^\\w\\s]/g, '')\r\n        .split(/\\s+/)\r\n        .filter(word => significantWords.includes(word))\r\n    )\r\n\r\n    movieWords.forEach(word => {\r\n      wordData[word].movies.push({\r\n        name: movie.name,\r\n        year: movie.year,\r\n        tagline: movie.tagline\r\n      })\r\n\r\n      wordData[word].count++\r\n\r\n      MetricsHelper.addMovieMetrics(wordData[word], movie)\r\n\r\n      if (movie.genre) {\r\n        const genres = Array.isArray(movie.genre) ? movie.genre : [movie.genre]\r\n        genres.forEach(genre => {\r\n          if (genre && genre.trim()) wordData[word].genres.push(genre.trim())\r\n        })\r\n      }\r\n    })\r\n  })\r\n\r\n  Object.keys(wordData).forEach(word => {\r\n    const data = wordData[word]\r\n    MetricsHelper.calculateAverages(data)\r\n\r\n    if (data.genres.length) {\r\n      const { mostPopularGenre, genreCounts } = MetricsHelper.findMostPopularGenre(data.genres)\r\n      data.mostPopularGenre = mostPopularGenre\r\n      data.genreCounts = genreCounts\r\n    }\r\n\r\n    MetricsHelper.cleanupMetricsProperties(data)\r\n    delete data.genres\r\n  })\r\n\r\n  const result = Object.entries(wordData)\r\n    .map(([word, data]) => ({\r\n      word,\r\n      ...data\r\n    }))\r\n    .sort((a, b) => b.count - a.count)\r\n\r\n  return result\r\n}\r\n\r\n/**\r\n * Analyzes the tagline length statistics and metrics for movies\r\n *\r\n * @param {object[]} movies Array of movie objects\r\n * @returns {object[]} Array of tagline length objects with associated movie data and metrics\r\n */\r\nexport function getTaglineLengthData (movies) {\r\n  const lengthMap = {}\r\n\r\n  const createLengthObject = () => {\r\n    return {\r\n      movies: [],\r\n      count: 0,\r\n      wordCount: 0,\r\n      ...MetricsHelper.createMetricsObject()\r\n    }\r\n  }\r\n\r\n  movies.forEach(movie => {\r\n    if (!movie.tagline || typeof movie.tagline !== 'string') return\r\n\r\n    const tagline = movie.tagline.trim()\r\n    if (tagline.length === 0) return\r\n\r\n    const length = tagline.length\r\n\r\n    if (!lengthMap[length]) lengthMap[length] = createLengthObject()\r\n    lengthMap[length].movies.push({\r\n      name: movie.name,\r\n      year: movie.year,\r\n      tagline: movie.tagline\r\n    })\r\n    lengthMap[length].count++\r\n\r\n    const wordCount = tagline.split(/\\s+/).length\r\n\r\n    lengthMap[length].wordCount += wordCount\r\n    MetricsHelper.addMovieMetrics(lengthMap[length], movie)\r\n  })\r\n\r\n  const result = Object.entries(lengthMap).map(([length, data]) => {\r\n    MetricsHelper.calculateAverages(data)\r\n\r\n    data.avgWordCount = data.wordCount / data.count\r\n    delete data.wordCount\r\n\r\n    MetricsHelper.cleanupMetricsProperties(data)\r\n    delete data.genres\r\n\r\n    return {\r\n      length: parseInt(length, 10),\r\n      ...data\r\n    }\r\n  })\r\n\r\n  return result.sort((a, b) => a.length - b.length)\r\n}\r\n\r\n/**\r\n * Calculates the profit for each movie based on budget and box office data\r\n *\r\n * @param {object[]} imdb Array of movie objects\r\n * @returns {object[]} Array of movie objects with added profit property\r\n */\r\nexport function calculateMovieProfits (imdb) {\r\n  imdb.forEach(movie => {\r\n    if (movie.budget && movie.box_office && typeof movie.budget !== 'string' && typeof movie.box_office !== 'string') {\r\n      movie.profit = movie.box_office - movie.budget\r\n    }\r\n  })\r\n\r\n  return imdb\r\n}\r\n\r\n/**\r\n * Groups and analyzes movies by their genres\r\n *\r\n * @param {object[]} movies Array of movie objects\r\n * @returns {object} Object with the genre data and associated movie metrics\r\n */\r\nexport function getMoviesByGenre (movies) {\r\n  const genreData = {}\r\n\r\n  movies.forEach(movie => {\r\n    const genres = []\r\n\r\n    if (movie.genre) {\r\n      if (Array.isArray(movie.genre)) {\r\n        for (let i = 0; i < movie.genre.length; i++) {\r\n          if (movie.genre[i] && typeof movie.genre[i] === 'string') {\r\n            genres.push(movie.genre[i].trim())\r\n          }\r\n        }\r\n      } else if (typeof movie.genre === 'object') {\r\n        Object.keys(movie.genre).forEach(key => {\r\n          if (movie.genre[key] && typeof movie.genre[key] === 'string') {\r\n            genres.push(movie.genre[key].trim())\r\n          }\r\n        })\r\n      } else if (typeof movie.genre === 'string') genres.push(movie.genre.trim())\r\n    }\r\n\r\n    genres.forEach(genreName => {\r\n      if (!genreData[genreName]) {\r\n        genreData[genreName] = {\r\n          movies: [],\r\n          count: 0,\r\n          ...MetricsHelper.createMetricsObject()\r\n        }\r\n      }\r\n\r\n      genreData[genreName].movies.push(movie)\r\n      genreData[genreName].count++\r\n\r\n      MetricsHelper.addMovieMetrics(genreData[genreName], movie)\r\n    })\r\n  })\r\n\r\n  Object.keys(genreData).forEach(genre => {\r\n    MetricsHelper.calculateAverages(genreData[genre])\r\n    MetricsHelper.cleanupMetricsProperties(genreData[genre])\r\n  })\r\n\r\n  return genreData\r\n}\r\n","// 'use strict'\r\n\r\nimport { addGoldenGlobesData, getGoldenGlobesMovieData } from './scripts/process_golden_globes'\r\nimport { addOscarsData, getOscarsMovieData } from './scripts/process_oscars'\r\nimport { addAdditionalMovieData, getAdditionalMovieData } from './scripts/process_additional_movie_data'\r\nimport { processMovieData } from './scripts/process_imdb'\r\nimport {\r\n  getFilmContributorsData, getGenreDataIntervals,\r\n  getTopCollaborations, getCertificateData, getDataBySeason, getMovieLengthData, getTaglineWordsData, getTaglineLengthData, calculateMovieProfits, getMoviesByGenre\r\n} from './scripts/preprocess_data'\r\n\r\nimport { adjustForInflation } from './scripts/helper.js'\r\n\r\n// import * as helper from './scripts/helper.js'\r\n// import * as preproc from './scripts/preprocess_imbd_data.js'\r\n// import * as viz from './scripts/viz.js'\r\n// import * as legend from './scripts/legend.js'\r\n// import * as hover from './scripts/hover.js'\r\n// import * as util from './scripts/util.js'\r\n\r\n// import * as d3Chromatic from 'd3-scale-chromatic'\r\n\r\n/**\r\n * @file This file is the entry-point for the the code for TP3 for the course INF8808.\r\n * @author Olivia Gélinas\r\n * @version v1.0.0\r\n */\r\n\r\n(function (d3) {\r\n  // let bounds\r\n  // let svgSize\r\n  // let graphSize\r\n\r\n  // const margin = { top: 35, right: 200, bottom: 35, left: 200 }\r\n\r\n  // const xScale = d3.scaleBand().padding(0.05)\r\n  // const yScale = d3.scaleBand().padding(0.2)\r\n  // const colorScale = d3.scaleSequential(d3Chromatic.interpolateYlGnBu)\r\n\r\n  Promise.all([\r\n    d3.csv('./golden_globe_awards.csv', d3.autoType),\r\n    d3.csv('./IMDB_Top_250_Movies.csv', d3.autoType),\r\n    d3.csv('./movie_dataset.csv', d3.autoType),\r\n    d3.csv('./the_oscar_award.csv', d3.autoType)\r\n  ]).then(function ([goldenGlobes, imdb, movies, oscars]) {\r\n    imdb = processMovieData(imdb)\r\n    const maxYear = imdb.reduce((max, movie) => movie.year > max ? movie.year : max, Number.MIN_VALUE)\r\n\r\n    imdb.forEach(movie => {\r\n      if (movie.box_office && typeof movie.box_office !== 'string') movie.box_office = adjustForInflation(movie.box_office, movie.year, maxYear)\r\n      if (movie.budget && typeof movie.budget !== 'string') movie.budget = adjustForInflation(movie.budget, movie.year, maxYear)\r\n    })\r\n\r\n    const movieNames = imdb.reduce((acc, movie) => {\r\n      if (!movie.name) return acc\r\n\r\n      const nameStr = String(movie.name)\r\n      const cleanName = nameStr.toLowerCase().replace(/[^a-z0-9\\s]/g, '')\r\n\r\n      if (!acc.includes(cleanName) && cleanName.trim() !== '') acc.push(cleanName)\r\n      return acc\r\n    }, [])\r\n\r\n    const oscarMovies = getOscarsMovieData(oscars, movieNames)\r\n    imdb = addOscarsData(imdb, oscarMovies)\r\n\r\n    const goldenGlobesMovies = getGoldenGlobesMovieData(goldenGlobes, movieNames)\r\n    imdb = addGoldenGlobesData(imdb, goldenGlobesMovies)\r\n\r\n    const additionalMovieData = getAdditionalMovieData(movies, movieNames)\r\n    imdb = addAdditionalMovieData(imdb, additionalMovieData)\r\n\r\n    imdb = calculateMovieProfits(imdb)\r\n    console.log(imdb)\r\n\r\n    const contributorData = getFilmContributorsData(imdb)\r\n    const genreIntervalData = getGenreDataIntervals(imdb)\r\n    const genreData = getMoviesByGenre(imdb)\r\n    console.log(genreData)\r\n\r\n    const collaborationsData = getTopCollaborations(imdb)\r\n\r\n    const certificateData = getCertificateData(imdb)\r\n    const seasonalData = getDataBySeason(imdb)\r\n\r\n    const movieLengthData = getMovieLengthData(imdb)\r\n    const taglineWordData = getTaglineWordsData(imdb)\r\n    const taglineLengthData = getTaglineLengthData(imdb)\r\n\r\n    // }, [])\r\n    // d3.csv('./golden_globe_awards.csv', d3.autoType).then(function (data) {\r\n    //   console.log(data)\r\n    //   const neighborhoodNames = preproc.getNeighborhoodNames(data)\r\n    //   data = preproc.filterYears(data, 2010, 2020)\r\n\r\n    //   data = preproc.summarizeYearlyCounts(data)\r\n    //   data = preproc.fillMissingData(data, neighborhoodNames, 2010, 2020, util.range)\r\n\r\n    // viz.setColorScaleDomain(colorScale, data)\r\n\r\n    // legend.initGradient(colorScale)\r\n    // legend.initLegendBar()\r\n    // legend.initLegendAxis()\r\n\r\n    // const g = helper.generateG(margin)\r\n\r\n    // helper.appendAxes(g)\r\n    // viz.appendRects(data)\r\n\r\n    // setSizing()\r\n    // build()\r\n\r\n    /**\r\n     *   This function handles the graph's sizing.\r\n     */\r\n    // function setSizing () {\r\n    //   bounds = d3.select('.graph').node().getBoundingClientRect()\r\n\r\n    //   svgSize = {\r\n    //     width: bounds.width,\r\n    //     height: 550\r\n    //   }\r\n\r\n    //   graphSize = {\r\n    //     width: svgSize.width - margin.right - margin.left,\r\n    //     height: svgSize.height - margin.bottom - margin.top\r\n    //   }\r\n\r\n    //   helper.setCanvasSize(svgSize.width, svgSize.height)\r\n    // }\r\n\r\n    /**\r\n     *   This function builds the graph.\r\n     */\r\n    // function build () {\r\n    //   viz.updateXScale(xScale, data, graphSize.width, util.range)\r\n    //   viz.updateYScale(yScale, neighborhoodNames, graphSize.height)\r\n\r\n    //   viz.drawXAxis(xScale)\r\n    //   viz.drawYAxis(yScale, graphSize.width)\r\n\r\n    //   viz.rotateYTicks()\r\n\r\n    //   viz.updateRects(xScale, yScale, colorScale)\r\n\r\n    //   hover.setRectHandler(xScale, yScale, hover.rectSelected, hover.rectUnselected, hover.selectTicks, hover.unselectTicks)\r\n\r\n    //   legend.draw(margin.left / 2, margin.top + 5, graphSize.height - 10, 15, 'url(#gradient)', colorScale)\r\n    // }\r\n\r\n    // window.addEventListener('resize', () => {\r\n    //   setSizing()\r\n    //   build()\r\n    // })\r\n  })\r\n})(d3)\r\n"]}